"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(e,t){function n(e,t){var n=(t=t||te).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function r(e){var t=!!e&&"length"in e&&e.length,n=pe.type(e);return"function"!==n&&!pe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function o(e,t,n){return pe.isFunction(t)?pe.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?pe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?pe.grep(e,function(e){return ae.call(t,e)>-1!==n}):Se.test(t)?pe.filter(t,e,n):(t=pe.filter(t,e),pe.grep(e,function(e){return ae.call(t,e)>-1!==n&&1===e.nodeType}))}function a(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function s(e){var t={};return pe.each(e.match(De)||[],function(e,n){t[n]=!0}),t}function u(e){return e}function l(e){throw e}function c(e,t,n,r){var i;try{e&&pe.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&pe.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function d(){te.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),pe.ready()}function f(){this.expando=pe.expando+f.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:qe.test(e)?JSON.parse(e):e)}function h(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Oe,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=p(n)}catch(e){}Pe.set(e,t,n)}else n=void 0;return n}function v(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return pe.css(e,t,"")},u=s(),l=n&&n[3]||(pe.cssNumber[t]?"":"px"),c=(pe.cssNumber[t]||"px"!==l&&+u)&&$e.exec(pe.css(e,t));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+u||1;do{c/=o=o||".5",pe.style(e,t,c+l)}while(o!==(o=s()/u)&&1!==o&&--a)}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}function m(e){var t,n=e.ownerDocument,r=e.nodeName,i=Ue[r];return i||(t=n.body.appendChild(n.createElement(r)),i=pe.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),Ue[r]=i,i)}function g(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=Fe.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Re(r)&&(i[o]=m(r))):"none"!==n&&(i[o]="none",Fe.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&i(e,t)?pe.merge([e],n):n}function b(e,t){for(var n=0,r=e.length;n<r;n++)Fe.set(e[n],"globalEval",!t||Fe.get(t[n],"globalEval"))}function x(e,t,n,r,i){for(var o,a,s,u,l,c,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===pe.type(o))pe.merge(f,o.nodeType?[o]:o);else if(Xe.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(Be.exec(o)||["",""])[1].toLowerCase(),u=ze[s]||ze._default,a.innerHTML=u[1]+pe.htmlPrefilter(o)+u[2],c=u[0];c--;)a=a.lastChild;pe.merge(f,a.childNodes),(a=d.firstChild).textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(r&&pe.inArray(o,r)>-1)i&&i.push(o);else if(l=pe.contains(o.ownerDocument,o),a=y(d.appendChild(o),"script"),l&&b(a),n)for(c=0;o=a[c++];)Ve.test(o.type||"")&&n.push(o);return d}function w(){return!0}function C(){return!1}function S(){try{return te.activeElement}catch(e){}}function k(e,t,n,r,i,o){var a,s;if("object"===(void 0===t?"undefined":_typeof(t))){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)k(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=C;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return pe().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=pe.guid++)),e.each(function(){pe.event.add(this,t,i,r,n)})}function T(e,t){return i(e,"table")&&i(11!==t.nodeType?t:t.firstChild,"tr")?pe(">tbody",e)[0]||e:e}function _(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function E(e){var t=tt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function D(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(Fe.hasData(e)&&(o=Fe.access(e),a=Fe.set(t,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)pe.event.add(t,i,l[i][n])}Pe.hasData(e)&&(s=Pe.access(e),u=pe.extend({},s),Pe.set(t,u))}}function N(e,t){var n=t.nodeName.toLowerCase();"input"===n&&We.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function j(e,t,r,i){t=ie.apply([],t);var o,a,s,u,l,c,d=0,f=e.length,p=f-1,h=t[0],v=pe.isFunction(h);if(v||f>1&&"string"==typeof h&&!fe.checkClone&&et.test(h))return e.each(function(n){var o=e.eq(n);v&&(t[0]=h.call(this,n,o.html())),j(o,t,r,i)});if(f&&(o=x(t,e[0].ownerDocument,!1,e,i),a=o.firstChild,1===o.childNodes.length&&(o=a),a||i)){for(u=(s=pe.map(y(o,"script"),_)).length;d<f;d++)l=o,d!==p&&(l=pe.clone(l,!0,!0),u&&pe.merge(s,y(l,"script"))),r.call(e[d],l,d);if(u)for(c=s[s.length-1].ownerDocument,pe.map(s,E),d=0;d<u;d++)l=s[d],Ve.test(l.type||"")&&!Fe.access(l,"globalEval")&&pe.contains(c,l)&&(l.src?pe._evalUrl&&pe._evalUrl(l.src):n(l.textContent.replace(nt,""),c))}return e}function A(e,t,n){for(var r,i=t?pe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||pe.cleanData(y(r)),r.parentNode&&(n&&pe.contains(r.ownerDocument,r)&&b(y(r,"script")),r.parentNode.removeChild(r));return e}function L(e,t,n){var r,i,o,a,s=e.style;return(n=n||ot(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||pe.contains(e.ownerDocument,e)||(a=pe.style(e,t)),!fe.pixelMarginRight()&&it.test(a)&&rt.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function F(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function P(e){if(e in dt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=ct.length;n--;)if((e=ct[n]+t)in dt)return e}function q(e){var t=pe.cssProps[e];return t||(t=pe.cssProps[e]=P(e)||e),t}function O(e,t,n){var r=$e.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function H(e,t,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=pe.css(e,n+Me[o],!0,i)),r?("content"===n&&(a-=pe.css(e,"padding"+Me[o],!0,i)),"margin"!==n&&(a-=pe.css(e,"border"+Me[o]+"Width",!0,i))):(a+=pe.css(e,"padding"+Me[o],!0,i),"padding"!==n&&(a+=pe.css(e,"border"+Me[o]+"Width",!0,i)));return a}function $(e,t,n){var r,i=ot(e),o=L(e,t,i),a="border-box"===pe.css(e,"boxSizing",!1,i);return it.test(o)?o:(r=a&&(fe.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+H(e,t,n||(a?"border":"content"),r,i)+"px")}function M(e,t,n,r,i){return new M.prototype.init(e,t,n,r,i)}function R(){pt&&(!1===te.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(R):e.setTimeout(R,pe.fx.interval),pe.fx.tick())}function I(){return e.setTimeout(function(){ft=void 0}),ft=pe.now()}function U(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=Me[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function W(e,t,n){for(var r,i=(V.tweeners[t]||[]).concat(V.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function B(e,t){var n,r,i,o,a;for(n in e)if(r=pe.camelCase(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=pe.cssHooks[r])&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function V(e,t,n){var r,i,o=0,a=V.prefilters.length,s=pe.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=ft||I(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(e,[l,r,n]),r<1&&a?n:(a||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:pe.extend({},t),opts:pe.extend(!0,{specialEasing:{},easing:pe.easing._default},n),originalProperties:t,originalOptions:n,startTime:ft||I(),duration:n.duration,tweens:[],createTween:function(t,n){var r=pe.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),c=l.props;for(B(c,l.opts.specialEasing);o<a;o++)if(r=V.prefilters[o].call(l,e,c,l.opts))return pe.isFunction(r.stop)&&(pe._queueHooks(l.elem,l.opts.queue).stop=pe.proxy(r.stop,r)),r;return pe.map(c,W,l),pe.isFunction(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),pe.fx.timer(pe.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}function z(e){return(e.match(De)||[]).join(" ")}function X(e){return e.getAttribute&&e.getAttribute("class")||""}function Q(e,t,n,r){var i;if(Array.isArray(t))pe.each(t,function(t,i){n||Tt.test(e)?r(e,i):Q(e+"["+("object"===(void 0===i?"undefined":_typeof(i))&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==pe.type(t))r(e,t);else for(i in t)Q(e+"["+i+"]",t[i],n,r)}function Y(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(De)||[];if(pe.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function G(e,t,n,r){function i(s){var u;return o[s]=!0,pe.each(e[s]||[],function(e,s){var l=s(t,n,r);return"string"!=typeof l||a||o[l]?a?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},a=e===Ht;return i(t.dataTypes[0])||!o["*"]&&i("*")}function J(e,t){var n,r,i=pe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&pe.extend(!0,e,r),e}function K(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function Z(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}var ee=[],te=e.document,ne=Object.getPrototypeOf,re=ee.slice,ie=ee.concat,oe=ee.push,ae=ee.indexOf,se={},ue=se.toString,le=se.hasOwnProperty,ce=le.toString,de=ce.call(Object),fe={},pe=function e(t,n){return new e.fn.init(t,n)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ve=/^-ms-/,me=/-([a-z])/g,ge=function(e,t){return t.toUpperCase()};pe.fn=pe.prototype={jquery:"3.2.1",constructor:pe,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=pe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return pe.each(this,e)},map:function(e){return this.pushStack(pe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:ee.sort,splice:ee.splice},pe.extend=pe.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"===(void 0===a?"undefined":_typeof(a))||pe.isFunction(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(l&&r&&(pe.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&pe.isPlainObject(n)?n:{},a[t]=pe.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},pe.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===pe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=pe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ue.call(e))&&(!(t=ne(e))||"function"==typeof(n=le.call(t,"constructor")&&t.constructor)&&ce.call(n)===de)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"===(void 0===e?"undefined":_typeof(e))||"function"==typeof e?se[ue.call(e)]||"object":void 0===e?"undefined":_typeof(e)},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(ve,"ms-").replace(me,ge)},each:function(e,t){var n,i=0;if(r(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(r(Object(e))?pe.merge(n,"string"==typeof e?[e]:e):oe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:ae.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var i,o,a=0,s=[];if(r(e))for(i=e.length;a<i;a++)null!=(o=t(e[a],a,n))&&s.push(o);else for(a in e)null!=(o=t(e[a],a,n))&&s.push(o);return ie.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),pe.isFunction(e))return r=re.call(arguments,2),i=function(){return e.apply(t||this,r.concat(re.call(arguments)))},i.guid=e.guid=e.guid||pe.guid++,i},now:Date.now,support:fe}),"function"==typeof Symbol&&(pe.fn[Symbol.iterator]=ee[Symbol.iterator]),pe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){se["[object "+t+"]"]=t.toLowerCase()});var ye=function(e){function t(e,t,n,r){var i,o,a,s,u,c,f,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:M)!==A&&j(t),t=t||A,F)){if(11!==h&&(u=ve.exec(e)))if(i=u[1]){if(9===h){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(p&&(a=p.getElementById(i))&&H(t,a)&&a.id===i)return n.push(a),n}else{if(u[2])return G.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&x.getElementsByClassName&&t.getElementsByClassName)return G.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!B[e+" "]&&(!P||!P.test(e))){if(1!==h)p=t,f=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,xe):t.setAttribute("id",s=$),o=(c=k(e)).length;o--;)c[o]="#"+s+" "+d(c[o]);f=c.join(","),p=me.test(e)&&l(t.parentNode)||t}if(f)try{return G.apply(n,p.querySelectorAll(f)),n}catch(e){}finally{s===$&&t.removeAttribute("id")}}}return _(e.replace(oe,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[$]=!0,e}function i(e){var t=A.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)w.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function l(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function d(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function f(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=I++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var l,c,d,f=[R,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(d=t[$]||(t[$]={}),c=d[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[o])&&l[0]===R&&l[1]===s)return f[2]=l[2];if(c[o]=f,f[2]=e(t,n,u))return!0}return!1}}function p(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function h(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function v(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function m(e,t,n,i,o,a){return i&&!i[$]&&(i=m(i)),o&&!o[$]&&(o=m(o,a)),r(function(r,a,s,u){var l,c,d,f=[],p=[],m=a.length,g=r||h(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?g:v(g,f,e,s,u),b=n?o||(r?e:m||i)?[]:a:y;if(n&&n(y,b,s,u),i)for(l=v(b,p),i(l,[],s,u),c=l.length;c--;)(d=l[c])&&(b[p[c]]=!(y[p[c]]=d));if(r){if(o||e){if(o){for(l=[],c=b.length;c--;)(d=b[c])&&l.push(y[c]=d);o(null,b=[],l,u)}for(c=b.length;c--;)(d=b[c])&&(l=o?K(r,d):f[c])>-1&&(r[l]=!(a[l]=d))}}else b=v(b===a?b.splice(m,b.length):b),o?o(null,a,b,u):G.apply(a,b)})}function g(e){for(var t,n,r,i=e.length,o=w.relative[e[0].type],a=o||w.relative[" "],s=o?1:0,u=f(function(e){return e===t},a,!0),l=f(function(e){return K(t,e)>-1},a,!0),c=[function(e,n,r){var i=!o&&(r||n!==E)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];s<i;s++)if(n=w.relative[e[s].type])c=[f(p(c),n)];else{if((n=w.filter[e[s].type].apply(null,e[s].matches))[$]){for(r=++s;r<i&&!w.relative[e[r].type];r++);return m(s>1&&p(c),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(oe,"$1"),n,s<r&&g(e.slice(s,r)),r<i&&g(e=e.slice(r)),r<i&&d(e))}c.push(n)}return p(c)}function y(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,u,l){var c,d,f,p=0,h="0",m=r&&[],g=[],y=E,b=r||o&&w.find.TAG("*",l),x=R+=null==y?1:Math.random()||.1,C=b.length;for(l&&(E=a===A||a||l);h!==C&&null!=(c=b[h]);h++){if(o&&c){for(d=0,a||c.ownerDocument===A||(j(c),s=!F);f=e[d++];)if(f(c,a||A,s)){u.push(c);break}l&&(R=x)}i&&((c=!f&&c)&&p--,r&&m.push(c))}if(p+=h,i&&h!==p){for(d=0;f=n[d++];)f(m,g,a,s);if(r){if(p>0)for(;h--;)m[h]||g[h]||(g[h]=Q.call(u));g=v(g)}G.apply(u,g),l&&!r&&g.length>0&&p+n.length>1&&t.uniqueSort(u)}return l&&(R=x,E=y),m};return i?r(a):a}var b,x,w,C,S,k,T,_,E,D,N,j,A,L,F,P,q,O,H,$="sizzle"+1*new Date,M=e.document,R=0,I=0,U=n(),W=n(),B=n(),V=function(e,t){return e===t&&(N=!0),0},z={}.hasOwnProperty,X=[],Q=X.pop,Y=X.push,G=X.push,J=X.slice,K=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",re=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ie=new RegExp(ee+"+","g"),oe=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),ae=new RegExp("^"+ee+"*,"+ee+"*"),se=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),ue=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),le=new RegExp(re),ce=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+re),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ge=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},we=function(){j()},Ce=f(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{G.apply(X=J.call(M.childNodes),M.childNodes),X[M.childNodes.length].nodeType}catch(e){G={apply:X.length?function(e,t){Y.apply(e,J.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},S=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},j=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:M;return r!==A&&9===r.nodeType&&r.documentElement?(A=r,L=A.documentElement,F=!S(A),M!==A&&(n=A.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(A.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(A.getElementsByClassName),x.getById=i(function(e){return L.appendChild(e).id=$,!A.getElementsByName||!A.getElementsByName($).length}),x.getById?(w.filter.ID=function(e){var t=e.replace(ge,ye);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&F){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var t=e.replace(ge,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&F){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),w.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&F)return t.getElementsByClassName(e)},q=[],P=[],(x.qsa=he.test(A.querySelectorAll))&&(i(function(e){L.appendChild(e).innerHTML="<a id='"+$+"'></a><select id='"+$+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||P.push("\\["+ee+"*(?:value|"+Z+")"),e.querySelectorAll("[id~="+$+"-]").length||P.push("~="),e.querySelectorAll(":checked").length||P.push(":checked"),e.querySelectorAll("a#"+$+"+*").length||P.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=A.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&P.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&P.push(":enabled",":disabled"),L.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&P.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),P.push(",.*:")})),(x.matchesSelector=he.test(O=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&i(function(e){x.disconnectedMatch=O.call(e,"*"),O.call(e,"[s!='']:x"),q.push("!=",re)}),P=P.length&&new RegExp(P.join("|")),q=q.length&&new RegExp(q.join("|")),t=he.test(L.compareDocumentPosition),H=t||he.test(L.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},V=t?function(e,t){if(e===t)return N=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===A||e.ownerDocument===M&&H(M,e)?-1:t===A||t.ownerDocument===M&&H(M,t)?1:D?K(D,e)-K(D,t):0:4&n?-1:1)}:function(e,t){if(e===t)return N=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],u=[t];if(!i||!o)return e===A?-1:t===A?1:i?-1:o?1:D?K(D,e)-K(D,t):0;if(i===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;s[r]===u[r];)r++;return r?a(s[r],u[r]):s[r]===M?-1:u[r]===M?1:0},A):A},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==A&&j(e),n=n.replace(ue,"='$1']"),x.matchesSelector&&F&&!B[n+" "]&&(!q||!q.test(n))&&(!P||!P.test(n)))try{var r=O.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,A,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==A&&j(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==A&&j(e);var n=w.attrHandle[t.toLowerCase()],r=n&&z.call(w.attrHandle,t.toLowerCase())?n(e,t,!F):void 0;return void 0!==r?r:x.attributes||!F?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(be,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(N=!x.detectDuplicates,D=!x.sortStable&&e.slice(0),e.sort(V),N){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return D=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},(w=t.selectors={cacheLength:50,createPseudo:r,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ge,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ge,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&le.test(n)&&(t=k(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ge,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=U[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&U(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ie," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,d,f,p,h,v=o!==a?"nextSibling":"previousSibling",m=t.parentNode,g=s&&t.nodeName.toLowerCase(),y=!u&&!s,b=!1;if(m){if(o){for(;v;){for(f=t;f=f[v];)if(s?f.nodeName.toLowerCase()===g:1===f.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(b=(p=(l=(c=(d=(f=m)[$]||(f[$]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===R&&l[1])&&l[2],f=p&&m.childNodes[p];f=++p&&f&&f[v]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){c[e]=[R,p,b];break}}else if(y&&(b=p=(l=(c=(d=(f=t)[$]||(f[$]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===R&&l[1]),!1===b)for(;(f=++p&&f&&f[v]||(b=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==g:1!==f.nodeType)||!++b||(y&&((c=(d=f[$]||(f[$]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[R,b]),f!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,n){var i,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[$]?o(n):o.length>1?(i=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)e[r=K(e,i[a])]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=T(e.replace(oe,"$1"));return i[$]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(ge,ye),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ge,ye).toLowerCase(),function(t){var n;do{if(n=F?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===L},focus:function(e){return e===A.activeElement&&(!A.hasFocus||A.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[n<0?n+t:n]}),even:u(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return c.prototype=w.filters=w.pseudos,w.setFilters=new c,k=t.tokenize=function(e,n){var r,i,o,a,s,u,l,c=W[e+" "];if(c)return n?0:c.slice(0);for(s=e,u=[],l=w.preFilter;s;){r&&!(i=ae.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),r=!1,(i=se.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(oe," ")}),s=s.slice(r.length));for(a in w.filter)!(i=de[a].exec(s))||l[a]&&!(i=l[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):W(e,u).slice(0)},T=t.compile=function(e,t){var n,r=[],i=[],o=B[e+" "];if(!o){for(t||(t=k(e)),n=t.length;n--;)(o=g(t[n]))[$]?r.push(o):i.push(o);(o=B(e,y(i,r))).selector=e}return o},_=t.select=function(e,t,n,r){var i,o,a,s,u,c="function"==typeof e&&e,f=!r&&k(e=c.selector||e);if(n=n||[],1===f.length){if((o=f[0]=f[0].slice(0)).length>2&&"ID"===(a=o[0]).type&&9===t.nodeType&&F&&w.relative[o[1].type]){if(!(t=(w.find.ID(a.matches[0].replace(ge,ye),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=de.needsContext.test(e)?0:o.length;i--&&(a=o[i],!w.relative[s=a.type]);)if((u=w.find[s])&&(r=u(a.matches[0].replace(ge,ye),me.test(o[0].type)&&l(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&d(o)))return G.apply(n,r),n;break}}return(c||T(e,f))(r,t,!F,n,!t||me.test(e)&&l(t.parentNode)||t),n},x.sortStable=$.split("").sort(V).join("")===$,x.detectDuplicates=!!N,j(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(A.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(Z,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);pe.find=ye,pe.expr=ye.selectors,pe.expr[":"]=pe.expr.pseudos,pe.uniqueSort=pe.unique=ye.uniqueSort,pe.text=ye.getText,pe.isXMLDoc=ye.isXML,pe.contains=ye.contains,pe.escapeSelector=ye.escape;var be=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&pe(e).is(n))break;r.push(e)}return r},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},we=pe.expr.match.needsContext,Ce=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Se=/^.[^:#\[\.,]*$/;pe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?pe.find.matchesSelector(r,e)?[r]:[]:pe.find.matches(e,pe.grep(t,function(e){return 1===e.nodeType}))},pe.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(pe(e).filter(function(){for(t=0;t<r;t++)if(pe.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)pe.find(e,i[t],n);return r>1?pe.uniqueSort(n):n},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(e){return!!o(this,"string"==typeof e&&we.test(e)?pe(e):e||[],!1).length}});var ke,Te=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(pe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||ke,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Te.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof pe?t[0]:t,pe.merge(this,pe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),Ce.test(r[1])&&pe.isPlainObject(t))for(r in t)pe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=te.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):pe.isFunction(e)?void 0!==n.ready?n.ready(e):e(pe):pe.makeArray(e,this)}).prototype=pe.fn,ke=pe(te);var _e=/^(?:parents|prev(?:Until|All))/,Ee={children:!0,contents:!0,next:!0,prev:!0};pe.fn.extend({has:function(e){var t=pe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(pe.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&pe(e);if(!we.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&pe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?pe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?ae.call(pe(e),this[0]):ae.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(pe.uniqueSort(pe.merge(this.get(),pe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),pe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return be(e,"parentNode")},parentsUntil:function(e,t,n){return be(e,"parentNode",n)},next:function(e){return a(e,"nextSibling")},prev:function(e){return a(e,"previousSibling")},nextAll:function(e){return be(e,"nextSibling")},prevAll:function(e){return be(e,"previousSibling")},nextUntil:function(e,t,n){return be(e,"nextSibling",n)},prevUntil:function(e,t,n){return be(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return i(e,"iframe")?e.contentDocument:(i(e,"template")&&(e=e.content||e),pe.merge([],e.childNodes))}},function(e,t){pe.fn[e]=function(n,r){var i=pe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=pe.filter(r,i)),this.length>1&&(Ee[e]||pe.uniqueSort(i),_e.test(e)&&i.reverse()),this.pushStack(i)}});var De=/[^\x20\t\r\n\f]+/g;pe.Callbacks=function(e){e="string"==typeof e?s(e):pe.extend({},e);var t,n,r,i,o=[],a=[],u=-1,l=function(){for(i=i||e.once,r=t=!0;a.length;u=-1)for(n=a.shift();++u<o.length;)!1===o[u].apply(n[0],n[1])&&e.stopOnFalse&&(u=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(u=o.length-1,a.push(n)),function t(n){pe.each(n,function(n,r){pe.isFunction(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==pe.type(r)&&t(r)})}(arguments),n&&!t&&l()),this},remove:function(){return pe.each(arguments,function(e,t){for(var n;(n=pe.inArray(t,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(e){return e?pe.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},pe.extend({Deferred:function(t){var n=[["notify","progress",pe.Callbacks("memory"),pe.Callbacks("memory"),2],["resolve","done",pe.Callbacks("once memory"),pe.Callbacks("once memory"),0,"resolved"],["reject","fail",pe.Callbacks("once memory"),pe.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return pe.Deferred(function(t){pe.each(n,function(n,r){var i=pe.isFunction(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&pe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){function o(t,n,r,i){return function(){var s=this,c=arguments,d=function(){var e,d;if(!(t<a)){if((e=r.apply(s,c))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"===(void 0===e?"undefined":_typeof(e))||"function"==typeof e)&&e.then,pe.isFunction(d)?i?d.call(e,o(a,n,u,i),o(a,n,l,i)):(a++,d.call(e,o(a,n,u,i),o(a,n,l,i),o(a,n,u,n.notifyWith))):(r!==u&&(s=void 0,c=[e]),(i||n.resolveWith)(s,c))}},f=i?d:function(){try{d()}catch(e){pe.Deferred.exceptionHook&&pe.Deferred.exceptionHook(e,f.stackTrace),t+1>=a&&(r!==l&&(s=void 0,c=[e]),n.rejectWith(s,c))}};t?f():(pe.Deferred.getStackHook&&(f.stackTrace=pe.Deferred.getStackHook()),e.setTimeout(f))}}var a=0;return pe.Deferred(function(e){n[0][3].add(o(0,e,pe.isFunction(i)?i:u,e.notifyWith)),n[1][3].add(o(0,e,pe.isFunction(t)?t:u)),n[2][3].add(o(0,e,pe.isFunction(r)?r:l))}).promise()},promise:function(e){return null!=e?pe.extend(e,i):i}},o={};return pe.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[0][2].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=re.call(arguments),o=pe.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?re.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(c(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||pe.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)c(i[n],a(n),o.reject);return o.promise()}});var Ne=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;pe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Ne.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},pe.readyException=function(t){e.setTimeout(function(){throw t})};var je=pe.Deferred();pe.fn.ready=function(e){return je.then(e).catch(function(e){pe.readyException(e)}),this},pe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--pe.readyWait:pe.isReady)||(pe.isReady=!0,!0!==e&&--pe.readyWait>0||je.resolveWith(te,[pe]))}}),pe.ready.then=je.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(pe.ready):(te.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var Ae=function e(t,n,r,i,o,a,s){var u=0,l=t.length,c=null==r;if("object"===pe.type(r)){o=!0;for(u in r)e(t,n,u,r[u],!0,a,s)}else if(void 0!==i&&(o=!0,pe.isFunction(i)||(s=!0),c&&(s?(n.call(t,i),n=null):(c=n,n=function(e,t,n){return c.call(pe(e),n)})),n))for(;u<l;u++)n(t[u],r,s?i:i.call(t[u],u,n(t[u],r)));return o?t:c?n.call(t):l?n(t[0],r):a},Le=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};f.uid=1,f.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Le(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[pe.camelCase(t)]=n;else for(r in t)i[pe.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][pe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(pe.camelCase):(t=pe.camelCase(t))in r?[t]:t.match(De)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||pe.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!pe.isEmptyObject(t)}};var Fe=new f,Pe=new f,qe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Oe=/[A-Z]/g;pe.extend({hasData:function(e){return Pe.hasData(e)||Fe.hasData(e)},data:function(e,t,n){return Pe.access(e,t,n)},removeData:function(e,t){Pe.remove(e,t)},_data:function(e,t,n){return Fe.access(e,t,n)},_removeData:function(e,t){Fe.remove(e,t)}}),pe.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Pe.get(o),1===o.nodeType&&!Fe.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=pe.camelCase(r.slice(5)),h(o,r,i[r]));Fe.set(o,"hasDataAttrs",!0)}return i}return"object"===(void 0===e?"undefined":_typeof(e))?this.each(function(){Pe.set(this,e)}):Ae(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=Pe.get(o,e)))return n;if(void 0!==(n=h(o,e)))return n}else this.each(function(){Pe.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Pe.remove(this,e)})}}),pe.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Fe.get(e,t),n&&(!r||Array.isArray(n)?r=Fe.access(e,t,pe.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=pe.queue(e,t),r=n.length,i=n.shift(),o=pe._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){pe.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Fe.get(e,n)||Fe.access(e,n,{empty:pe.Callbacks("once memory").add(function(){Fe.remove(e,[t+"queue",n])})})}}),pe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?pe.queue(this[0],e):void 0===t?this:this.each(function(){var n=pe.queue(this,e,t);pe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&pe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){pe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=pe.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Fe.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var He=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,$e=new RegExp("^(?:([+-])=|)("+He+")([a-z%]*)$","i"),Me=["Top","Right","Bottom","Left"],Re=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&pe.contains(e.ownerDocument,e)&&"none"===pe.css(e,"display")},Ie=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i},Ue={};pe.fn.extend({show:function(){return g(this,!0)},hide:function(){return g(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Re(this)?pe(this).show():pe(this).hide()})}});var We=/^(?:checkbox|radio)$/i,Be=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ve=/^$|\/(?:java|ecma)script/i,ze={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ze.optgroup=ze.option,ze.tbody=ze.tfoot=ze.colgroup=ze.caption=ze.thead,ze.th=ze.td;var Xe=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment().appendChild(te.createElement("div")),t=te.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),fe.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",fe.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Qe=te.documentElement,Ye=/^key/,Ge=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Je=/^([^.]*)(?:\.(.+)|)/;pe.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,l,c,d,f,p,h,v,m=Fe.get(e);if(m)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&pe.find.matchesSelector(Qe,i),n.guid||(n.guid=pe.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(t){return void 0!==pe&&pe.event.triggered!==t.type?pe.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(De)||[""]).length;l--;)p=v=(s=Je.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),p&&(d=pe.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,d=pe.event.special[p]||{},c=pe.extend({type:p,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&pe.expr.match.needsContext.test(i),namespace:h.join(".")},o),(f=u[p])||((f=u[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,c):f.push(c),pe.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,l,c,d,f,p,h,v,m=Fe.hasData(e)&&Fe.get(e);if(m&&(u=m.events)){for(l=(t=(t||"").match(De)||[""]).length;l--;)if(s=Je.exec(t[l])||[],p=v=s[1],h=(s[2]||"").split(".").sort(),p){for(d=pe.event.special[p]||{},f=u[p=(r?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)c=f[o],!i&&v!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(e,c));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,m.handle)||pe.removeEvent(e,p,m.handle),delete u[p])}else for(p in u)pe.event.remove(e,p+t[l],n,r,!0);pe.isEmptyObject(u)&&Fe.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=pe.event.fix(e),u=new Array(arguments.length),l=(Fe.get(this,"events")||{})[s.type]||[],c=pe.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=pe.event.handlers.call(this,s,l),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((pe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?pe(i,this).index(l)>-1:pe.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(pe.Event.prototype,e,{enumerable:!0,configurable:!0,get:pe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[pe.expando]?e:new pe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==S()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===S()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&i(this,"input"))return this.click(),!1},_default:function(e){return i(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},pe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},pe.Event=function(e,t){if(!(this instanceof pe.Event))return new pe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?w:C,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&pe.extend(this,t),this.timeStamp=e&&e.timeStamp||pe.now(),this[pe.expando]=!0},pe.Event.prototype={constructor:pe.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=w,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=w,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=w,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},pe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ye.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ge.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},pe.event.addProp),pe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){pe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||pe.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),pe.fn.extend({on:function(e,t,n,r){return k(this,e,t,n,r)},one:function(e,t,n,r){return k(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,pe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"===(void 0===e?"undefined":_typeof(e))){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=C),this.each(function(){pe.event.remove(this,e,n,t)})}});var Ke=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ze=/<script|<style|<link/i,et=/checked\s*(?:[^=]|=\s*.checked.)/i,tt=/^true\/(.*)/,nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;pe.extend({htmlPrefilter:function(e){return e.replace(Ke,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=pe.contains(e.ownerDocument,e);if(!(fe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||pe.isXMLDoc(e)))for(a=y(s),r=0,i=(o=y(e)).length;r<i;r++)N(o[r],a[r]);if(t)if(n)for(o=o||y(e),a=a||y(s),r=0,i=o.length;r<i;r++)D(o[r],a[r]);else D(e,s);return(a=y(s,"script")).length>0&&b(a,!u&&y(e,"script")),s},cleanData:function(e){for(var t,n,r,i=pe.event.special,o=0;void 0!==(n=e[o]);o++)if(Le(n)){if(t=n[Fe.expando]){if(t.events)for(r in t.events)i[r]?pe.event.remove(n,r):pe.removeEvent(n,r,t.handle);n[Fe.expando]=void 0}n[Pe.expando]&&(n[Pe.expando]=void 0)}}}),pe.fn.extend({detach:function(e){return A(this,e,!0)},remove:function(e){return A(this,e)},text:function(e){return Ae(this,function(e){return void 0===e?pe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return j(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||T(this,e).appendChild(e)})},prepend:function(){return j(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=T(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(pe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return pe.clone(this,e,t)})},html:function(e){return Ae(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ze.test(e)&&!ze[(Be.exec(e)||["",""])[1].toLowerCase()]){e=pe.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(pe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return j(this,arguments,function(t){var n=this.parentNode;pe.inArray(this,e)<0&&(pe.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),pe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){pe.fn[e]=function(e){for(var n,r=[],i=pe(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),pe(i[a])[t](n),oe.apply(r,n.get());return this.pushStack(r)}});var rt=/^margin/,it=new RegExp("^("+He+")(?!px)[a-z%]+$","i"),ot=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Qe.appendChild(a);var t=e.getComputedStyle(s);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,s.style.marginRight="50%",i="4px"===t.marginRight,Qe.removeChild(a),s=null}}var n,r,i,o,a=te.createElement("div"),s=te.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",fe.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),pe.extend(fe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),o}}))}();var at=/^(none|table(?!-c[ea]).+)/,st=/^--/,ut={position:"absolute",visibility:"hidden",display:"block"},lt={letterSpacing:"0",fontWeight:"400"},ct=["Webkit","Moz","ms"],dt=te.createElement("div").style;pe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=L(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=pe.camelCase(t),u=st.test(t),l=e.style;if(u||(t=q(s)),a=pe.cssHooks[t]||pe.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=void 0===n?"undefined":_typeof(n))&&(i=$e.exec(n))&&i[1]&&(n=v(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(pe.cssNumber[s]?"":"px")),fe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=pe.camelCase(t);return st.test(t)||(t=q(s)),(a=pe.cssHooks[t]||pe.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=L(e,t,r)),"normal"===i&&t in lt&&(i=lt[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),pe.each(["height","width"],function(e,t){pe.cssHooks[t]={get:function(e,n,r){if(n)return!at.test(pe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?$(e,t,r):Ie(e,ut,function(){return $(e,t,r)})},set:function(e,n,r){var i,o=r&&ot(e),a=r&&H(e,t,r,"border-box"===pe.css(e,"boxSizing",!1,o),o);return a&&(i=$e.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=pe.css(e,t)),O(0,n,a)}}}),pe.cssHooks.marginLeft=F(fe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(L(e,"marginLeft"))||e.getBoundingClientRect().left-Ie(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),pe.each({margin:"",padding:"",border:"Width"},function(e,t){pe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Me[r]+t]=o[r]||o[r-2]||o[0];return i}},rt.test(e)||(pe.cssHooks[e+t].set=O)}),pe.fn.extend({css:function(e,t){return Ae(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=ot(e),i=t.length;a<i;a++)o[t[a]]=pe.css(e,t[a],!1,r);return o}return void 0!==n?pe.style(e,t,n):pe.css(e,t)},e,t,arguments.length>1)}}),pe.Tween=M,M.prototype={constructor:M,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||pe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(pe.cssNumber[n]?"":"px")},cur:function(){var e=M.propHooks[this.prop];return e&&e.get?e.get(this):M.propHooks._default.get(this)},run:function(e){var t,n=M.propHooks[this.prop];return this.options.duration?this.pos=t=pe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):M.propHooks._default.set(this),this}},M.prototype.init.prototype=M.prototype,M.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=pe.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){pe.fx.step[e.prop]?pe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[pe.cssProps[e.prop]]&&!pe.cssHooks[e.prop]?e.elem[e.prop]=e.now:pe.style(e.elem,e.prop,e.now+e.unit)}}},M.propHooks.scrollTop=M.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},pe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},pe.fx=M.prototype.init,pe.fx.step={};var ft,pt,ht=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;pe.Animation=pe.extend(V,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return v(n.elem,e,$e.exec(t),n),n}]},tweener:function(e,t){pe.isFunction(e)?(t=e,e=["*"]):e=e.match(De);for(var n,r=0,i=e.length;r<i;r++)n=e[r],V.tweeners[n]=V.tweeners[n]||[],V.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,d="width"in t||"height"in t,f=this,p={},h=e.style,v=e.nodeType&&Re(e),m=Fe.get(e,"fxshow");n.queue||(null==(a=pe._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,pe.queue(e,"fx").length||a.empty.fire()})}));for(r in t)if(i=t[r],ht.test(i)){if(delete t[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;v=!0}p[r]=m&&m[r]||pe.style(e,r)}if((u=!pe.isEmptyObject(t))||!pe.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=m&&m.display)&&(l=Fe.get(e,"display")),"none"===(c=pe.css(e,"display"))&&(l?c=l:(g([e],!0),l=e.style.display||l,c=pe.css(e,"display"),g([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===pe.css(e,"float")&&(u||(f.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in p)u||(m?"hidden"in m&&(v=m.hidden):m=Fe.access(e,"fxshow",{display:l}),o&&(m.hidden=!v),v&&g([e],!0),f.done(function(){v||g([e]),Fe.remove(e,"fxshow");for(r in p)pe.style(e,r,p[r])})),u=W(v?m[r]:0,r,f),r in m||(m[r]=u.start,v&&(u.end=u.start,u.start=0))}}],prefilter:function(e,t){t?V.prefilters.unshift(e):V.prefilters.push(e)}}),pe.speed=function(e,t,n){var r=e&&"object"===(void 0===e?"undefined":_typeof(e))?pe.extend({},e):{complete:n||!n&&t||pe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!pe.isFunction(t)&&t};return pe.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in pe.fx.speeds?r.duration=pe.fx.speeds[r.duration]:r.duration=pe.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){pe.isFunction(r.old)&&r.old.call(this),r.queue&&pe.dequeue(this,r.queue)},r},pe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Re).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=pe.isEmptyObject(e),o=pe.speed(t,n,r),a=function(){var t=V(this,pe.extend({},e),o);(i||Fe.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=pe.timers,a=Fe.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&vt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||pe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Fe.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=pe.timers,a=r?r.length:0;for(n.finish=!0,pe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),pe.each(["toggle","show","hide"],function(e,t){var n=pe.fn[t];pe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(U(t,!0),e,r,i)}}),pe.each({slideDown:U("show"),slideUp:U("hide"),slideToggle:U("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){pe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),pe.timers=[],pe.fx.tick=function(){var e,t=0,n=pe.timers;for(ft=pe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||pe.fx.stop(),ft=void 0},pe.fx.timer=function(e){pe.timers.push(e),pe.fx.start()},pe.fx.interval=13,pe.fx.start=function(){pt||(pt=!0,R())},pe.fx.stop=function(){pt=null},pe.fx.speeds={slow:600,fast:200,_default:400},pe.fn.delay=function(t,n){return t=pe.fx?pe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=te.createElement("input"),t=te.createElement("select").appendChild(te.createElement("option"));e.type="checkbox",fe.checkOn=""!==e.value,fe.optSelected=t.selected,(e=te.createElement("input")).value="t",e.type="radio",fe.radioValue="t"===e.value}();var mt,gt=pe.expr.attrHandle;pe.fn.extend({attr:function(e,t){return Ae(this,pe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){pe.removeAttr(this,e)})}}),pe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?pe.prop(e,t,n):(1===o&&pe.isXMLDoc(e)||(i=pe.attrHooks[t.toLowerCase()]||(pe.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void pe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=pe.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!fe.radioValue&&"radio"===t&&i(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(De);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?pe.removeAttr(e,n):e.setAttribute(n,n),n}},pe.each(pe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=gt[t]||pe.find.attr;gt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=gt[a],gt[a]=i,i=null!=n(e,t,r)?a:null,gt[a]=o),i}});var yt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;pe.fn.extend({prop:function(e,t){return Ae(this,pe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[pe.propFix[e]||e]})}}),pe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&pe.isXMLDoc(e)||(t=pe.propFix[t]||t,i=pe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=pe.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),fe.optSelected||(pe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),pe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){pe.propFix[this.toLowerCase()]=this}),pe.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(pe.isFunction(e))return this.each(function(t){pe(this).addClass(e.call(this,t,X(this)))});if("string"==typeof e&&e)for(t=e.match(De)||[];n=this[u++];)if(i=X(n),r=1===n.nodeType&&" "+z(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=z(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(pe.isFunction(e))return this.each(function(t){pe(this).removeClass(e.call(this,t,X(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(De)||[];n=this[u++];)if(i=X(n),r=1===n.nodeType&&" "+z(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=z(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=void 0===e?"undefined":_typeof(e);return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):pe.isFunction(e)?this.each(function(n){pe(this).toggleClass(e.call(this,n,X(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=pe(this),o=e.match(De)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=X(this))&&Fe.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Fe.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+z(X(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;pe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=pe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,pe(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=pe.map(i,function(e){return null==e?"":e+""})),(t=pe.valHooks[this.type]||pe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=pe.valHooks[i.type]||pe.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(xt,""):null==n?"":n}}}),pe.extend({valHooks:{option:{get:function(e){var t=pe.find.attr(e,"value");return null!=t?t:z(pe.text(e))}},select:{get:function(e){var t,n,r,o=e.options,a=e.selectedIndex,s="select-one"===e.type,u=s?null:[],l=s?a+1:o.length;for(r=a<0?l:s?a:0;r<l;r++)if(((n=o[r]).selected||r===a)&&!n.disabled&&(!n.parentNode.disabled||!i(n.parentNode,"optgroup"))){if(t=pe(n).val(),s)return t;u.push(t)}return u},set:function(e,t){for(var n,r,i=e.options,o=pe.makeArray(t),a=i.length;a--;)((r=i[a]).selected=pe.inArray(pe.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),pe.each(["radio","checkbox"],function(){pe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=pe.inArray(pe(e).val(),t)>-1}},fe.checkOn||(pe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var wt=/^(?:focusinfocus|focusoutblur)$/;pe.extend(pe.event,{trigger:function(t,n,r,i){var o,a,s,u,l,c,d,f=[r||te],p=le.call(t,"type")?t.type:t,h=le.call(t,"namespace")?t.namespace.split("."):[];if(a=s=r=r||te,3!==r.nodeType&&8!==r.nodeType&&!wt.test(p+pe.event.triggered)&&(p.indexOf(".")>-1&&(p=(h=p.split(".")).shift(),h.sort()),l=p.indexOf(":")<0&&"on"+p,t=t[pe.expando]?t:new pe.Event(p,"object"===(void 0===t?"undefined":_typeof(t))&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:pe.makeArray(n,[t]),d=pe.event.special[p]||{},i||!d.trigger||!1!==d.trigger.apply(r,n))){if(!i&&!d.noBubble&&!pe.isWindow(r)){for(u=d.delegateType||p,wt.test(u+p)||(a=a.parentNode);a;a=a.parentNode)f.push(a),s=a;s===(r.ownerDocument||te)&&f.push(s.defaultView||s.parentWindow||e)}for(o=0;(a=f[o++])&&!t.isPropagationStopped();)t.type=o>1?u:d.bindType||p,(c=(Fe.get(a,"events")||{})[t.type]&&Fe.get(a,"handle"))&&c.apply(a,n),(c=l&&a[l])&&c.apply&&Le(a)&&(t.result=c.apply(a,n),!1===t.result&&t.preventDefault());return t.type=p,i||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),n)||!Le(r)||l&&pe.isFunction(r[p])&&!pe.isWindow(r)&&((s=r[l])&&(r[l]=null),pe.event.triggered=p,r[p](),pe.event.triggered=void 0,s&&(r[l]=s)),t.result}},simulate:function(e,t,n){var r=pe.extend(new pe.Event,n,{type:e,isSimulated:!0});pe.event.trigger(r,null,t)}}),pe.fn.extend({trigger:function(e,t){return this.each(function(){pe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return pe.event.trigger(e,t,n,!0)}}),pe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){pe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),pe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),fe.focusin="onfocusin"in e,fe.focusin||pe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){pe.event.simulate(t,e.target,pe.event.fix(e))};pe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Fe.access(r,t);i||r.addEventListener(e,n,!0),Fe.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Fe.access(r,t)-1;i?Fe.access(r,t,i):(r.removeEventListener(e,n,!0),Fe.remove(r,t))}}});var Ct=e.location,St=pe.now(),kt=/\?/;pe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||pe.error("Invalid XML: "+t),n};var Tt=/\[\]$/,_t=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;pe.param=function(e,t){var n,r=[],i=function(e,t){var n=pe.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!pe.isPlainObject(e))pe.each(e,function(){i(this.name,this.value)});else for(n in e)Q(n,e[n],t,i);return r.join("&")},pe.fn.extend({serialize:function(){return pe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=pe.prop(this,"elements");return e?pe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!pe(this).is(":disabled")&&Dt.test(this.nodeName)&&!Et.test(e)&&(this.checked||!We.test(e))}).map(function(e,t){var n=pe(this).val();return null==n?null:Array.isArray(n)?pe.map(n,function(e){return{name:t.name,value:e.replace(_t,"\r\n")}}):{name:t.name,value:n.replace(_t,"\r\n")}}).get()}});var Nt=/%20/g,jt=/#.*$/,At=/([?&])_=[^&]*/,Lt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ft=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Pt=/^(?:GET|HEAD)$/,qt=/^\/\//,Ot={},Ht={},$t="*/".concat("*"),Mt=te.createElement("a");Mt.href=Ct.href,pe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:Ft.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":pe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?J(J(e,pe.ajaxSettings),t):J(pe.ajaxSettings,e)},ajaxPrefilter:Y(Ot),ajaxTransport:Y(Ht),ajax:function(t,n){function r(t,n,r,s){var l,f,p,x,w,C=n;c||(c=!0,u&&e.clearTimeout(u),i=void 0,a=s||"",S.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(x=K(h,S,r)),x=Z(h,x,S,l),l?(h.ifModified&&((w=S.getResponseHeader("Last-Modified"))&&(pe.lastModified[o]=w),(w=S.getResponseHeader("etag"))&&(pe.etag[o]=w)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=x.state,f=x.data,l=!(p=x.error))):(p=C,!t&&C||(C="error",t<0&&(t=0))),S.status=t,S.statusText=(n||C)+"",l?g.resolveWith(v,[f,C,S]):g.rejectWith(v,[S,C,p]),S.statusCode(b),b=void 0,d&&m.trigger(l?"ajaxSuccess":"ajaxError",[S,h,l?f:p]),y.fireWith(v,[S,C]),d&&(m.trigger("ajaxComplete",[S,h]),--pe.active||pe.event.trigger("ajaxStop")))}"object"===(void 0===t?"undefined":_typeof(t))&&(n=t,t=void 0),n=n||{};var i,o,a,s,u,l,c,d,f,p,h=pe.ajaxSetup({},n),v=h.context||h,m=h.context&&(v.nodeType||v.jquery)?pe(v):pe.event,g=pe.Deferred(),y=pe.Callbacks("once memory"),b=h.statusCode||{},x={},w={},C="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Lt.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)S.always(e[S.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||C;return i&&i.abort(t),r(0,t),this}};if(g.promise(S),h.url=((t||h.url||Ct.href)+"").replace(qt,Ct.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(De)||[""],null==h.crossDomain){l=te.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Mt.protocol+"//"+Mt.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=pe.param(h.data,h.traditional)),G(Ot,h,n,S),c)return S;(d=pe.event&&h.global)&&0==pe.active++&&pe.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Pt.test(h.type),o=h.url.replace(jt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Nt,"+")):(p=h.url.slice(o.length),h.data&&(o+=(kt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(At,"$1"),p=(kt.test(o)?"&":"?")+"_="+St+++p),h.url=o+p),h.ifModified&&(pe.lastModified[o]&&S.setRequestHeader("If-Modified-Since",pe.lastModified[o]),pe.etag[o]&&S.setRequestHeader("If-None-Match",pe.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&S.setRequestHeader("Content-Type",h.contentType),S.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$t+"; q=0.01":""):h.accepts["*"]);for(f in h.headers)S.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(v,S,h)||c))return S.abort();if(C="abort",y.add(h.complete),S.done(h.success),S.fail(h.error),i=G(Ht,h,n,S)){if(S.readyState=1,d&&m.trigger("ajaxSend",[S,h]),c)return S;h.async&&h.timeout>0&&(u=e.setTimeout(function(){S.abort("timeout")},h.timeout));try{c=!1,i.send(x,r)}catch(e){if(c)throw e;r(-1,e)}}else r(-1,"No Transport");return S},getJSON:function(e,t,n){return pe.get(e,t,n,"json")},getScript:function(e,t){return pe.get(e,void 0,t,"script")}}),pe.each(["get","post"],function(e,t){pe[t]=function(e,n,r,i){return pe.isFunction(n)&&(i=i||r,r=n,n=void 0),pe.ajax(pe.extend({url:e,type:t,dataType:i,data:n,success:r},pe.isPlainObject(e)&&e))}}),pe._evalUrl=function(e){return pe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},pe.fn.extend({wrapAll:function(e){var t;return this[0]&&(pe.isFunction(e)&&(e=e.call(this[0])),t=pe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return pe.isFunction(e)?this.each(function(t){pe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=pe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=pe.isFunction(e);return this.each(function(n){pe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){pe(this).replaceWith(this.childNodes)}),this}}),pe.expr.pseudos.hidden=function(e){return!pe.expr.pseudos.visible(e)},pe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},pe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Rt={0:200,1223:204},It=pe.ajaxSettings.xhr();fe.cors=!!It&&"withCredentials"in It,fe.ajax=It=!!It,pe.ajaxTransport(function(t){var n,r;if(fe.cors||It&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Rt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),pe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),pe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return pe.globalEval(e),e}}}),pe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),pe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=pe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Ut=[],Wt=/(=)\?(?=&|$)|\?\?/;pe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ut.pop()||pe.expando+"_"+St++;return this[e]=!0,e}}),pe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=!1!==t.jsonp&&(Wt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=pe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Wt,"$1"+i):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||pe.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?pe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Ut.push(i)),a&&pe.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),fe.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),pe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,i,o;return t||(fe.createHTMLDocument?((r=(t=te.implementation.createHTMLDocument("")).createElement("base")).href=te.location.href,t.head.appendChild(r)):t=te),i=Ce.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=x([e],t,o),o&&o.length&&pe(o).remove(),pe.merge([],i.childNodes))},pe.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=z(e.slice(s)),e=e.slice(0,s)),pe.isFunction(t)?(n=t,t=void 0):t&&"object"===(void 0===t?"undefined":_typeof(t))&&(i="POST"),a.length>0&&pe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?pe("<div>").append(pe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},pe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){pe.fn[t]=function(e){return this.on(t,e)}}),pe.expr.pseudos.animated=function(e){return pe.grep(pe.timers,function(t){return e===t.elem}).length},pe.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=pe.css(e,"position"),c=pe(e),d={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=pe.css(e,"top"),u=pe.css(e,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),pe.isFunction(t)&&(t=t.call(e,n,pe.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):c.css(d)}},pe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){pe.offset.setOffset(this,e,t)});var t,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,i=t.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===pe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),i(e[0],"html")||(r=e.offset()),r={top:r.top+pe.css(e[0],"borderTopWidth",!0),left:r.left+pe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-pe.css(n,"marginTop",!0),left:t.left-r.left-pe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===pe.css(e,"position");)e=e.offsetParent;return e||Qe})}}),pe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;pe.fn[e]=function(r){return Ae(this,function(e,r,i){var o;if(pe.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),pe.each(["top","left"],function(e,t){pe.cssHooks[t]=F(fe.pixelPosition,function(e,n){if(n)return n=L(e,t),it.test(n)?pe(e).position()[t]+"px":n})}),pe.each({Height:"height",Width:"width"},function(e,t){pe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){pe.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Ae(this,function(t,n,i){var o;return pe.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?pe.css(t,n,s):pe.style(t,n,i,s)},t,a?i:void 0,a)}})}),pe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),pe.holdReady=function(e){e?pe.readyWait++:pe.ready(!0)},pe.isArray=Array.isArray,pe.parseJSON=JSON.parse,pe.nodeName=i,"function"==typeof define&&define.amd&&define("jquery",[],function(){return pe});var Bt=e.jQuery,Vt=e.$;return pe.noConflict=function(t){return e.$===pe&&(e.$=Vt),t&&e.jQuery===pe&&(e.jQuery=Bt),pe},t||(e.jQuery=e.$=pe),pe});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){"function"==typeof define&&define.amd?define([],e):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=e():window.noUiSlider=e()}(function(){function e(e){return"object"===(void 0===e?"undefined":_typeof(e))&&"function"==typeof e.to&&"function"==typeof e.from}function t(e){e.parentElement.removeChild(e)}function n(e){e.preventDefault()}function r(e){return e.filter(function(e){return!this[e]&&(this[e]=!0)},{})}function i(e,t){return Math.round(e/t)*t}function o(e,t){var n=e.getBoundingClientRect(),r=e.ownerDocument,i=r.documentElement,o=h(r);return/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(o.x=0),t?n.top+o.y-i.clientTop:n.left+o.x-i.clientLeft}function a(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}function s(e,t,n){n>0&&(d(e,t),setTimeout(function(){f(e,t)},n))}function u(e){return Math.max(Math.min(e,100),0)}function l(e){return Array.isArray(e)?e:[e]}function c(e){var t=(e=String(e)).split(".");return t.length>1?t[1].length:0}function d(e,t){e.classList?e.classList.add(t):e.className+=" "+t}function f(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}function p(e,t){return e.classList?e.classList.contains(t):new RegExp("\\b"+t+"\\b").test(e.className)}function h(e){var t=void 0!==window.pageXOffset,n="CSS1Compat"===(e.compatMode||"");return{x:t?window.pageXOffset:n?e.documentElement.scrollLeft:e.body.scrollLeft,y:t?window.pageYOffset:n?e.documentElement.scrollTop:e.body.scrollTop}}function v(){return window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"}}function m(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("test",null,t)}catch(e){}return e}function g(){return window.CSS&&CSS.supports&&CSS.supports("touch-action","none")}function y(e,t){return 100/(t-e)}function b(e,t){return 100*t/(e[1]-e[0])}function x(e,t){return b(e,e[0]<0?t+Math.abs(e[0]):t-e[0])}function w(e,t){return t*(e[1]-e[0])/100+e[0]}function C(e,t){for(var n=1;e>=t[n];)n+=1;return n}function S(e,t,n){if(n>=e.slice(-1)[0])return 100;var r,i,o,a,s=C(n,e);return r=e[s-1],i=e[s],o=t[s-1],a=t[s],o+x([r,i],n)/y(o,a)}function k(e,t,n){if(n>=100)return e.slice(-1)[0];var r,i,o,a,s=C(n,t);return r=e[s-1],i=e[s],o=t[s-1],a=t[s],w([r,i],(n-o)*y(o,a))}function T(e,t,n,r){if(100===r)return r;var o,a,s=C(r,e);return n?(o=e[s-1],a=e[s],r-o>(a-o)/2?a:o):t[s-1]?e[s-1]+i(r-e[s-1],t[s-1]):r}function _(e,t,n){var r;if("number"==typeof t&&(t=[t]),"[object Array]"!==Object.prototype.toString.call(t))throw new Error("noUiSlider ("+J+"): 'range' contains invalid value.");if(r="min"===e?0:"max"===e?100:parseFloat(e),!a(r)||!a(t[0]))throw new Error("noUiSlider ("+J+"): 'range' value isn't numeric.");n.xPct.push(r),n.xVal.push(t[0]),r?n.xSteps.push(!isNaN(t[1])&&t[1]):isNaN(t[1])||(n.xSteps[0]=t[1]),n.xHighestCompleteStep.push(0)}function E(e,t,n){if(!t)return!0;n.xSteps[e]=b([n.xVal[e],n.xVal[e+1]],t)/y(n.xPct[e],n.xPct[e+1]);var r=(n.xVal[e+1]-n.xVal[e])/n.xNumSteps[e],i=Math.ceil(Number(r.toFixed(3))-1),o=n.xVal[e]+n.xNumSteps[e]*i;n.xHighestCompleteStep[e]=o}function D(e,t,n){this.xPct=[],this.xVal=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=t;var r,i=[];for(r in e)e.hasOwnProperty(r)&&i.push([e[r],r]);for(i.length&&"object"===_typeof(i[0][0])?i.sort(function(e,t){return e[0][0]-t[0][0]}):i.sort(function(e,t){return e[0]-t[0]}),r=0;r<i.length;r++)_(i[r][1],i[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)E(r,this.xNumSteps[r],this)}function N(t){if(e(t))return!0;throw new Error("noUiSlider ("+J+"): 'format' requires 'to' and 'from' methods.")}function j(e,t){if(!a(t))throw new Error("noUiSlider ("+J+"): 'step' is not numeric.");e.singleStep=t}function A(e,t){if("object"!==(void 0===t?"undefined":_typeof(t))||Array.isArray(t))throw new Error("noUiSlider ("+J+"): 'range' is not an object.");if(void 0===t.min||void 0===t.max)throw new Error("noUiSlider ("+J+"): Missing 'min' or 'max' in 'range'.");if(t.min===t.max)throw new Error("noUiSlider ("+J+"): 'range' 'min' and 'max' cannot be equal.");e.spectrum=new D(t,e.snap,e.singleStep)}function L(e,t){if(t=l(t),!Array.isArray(t)||!t.length)throw new Error("noUiSlider ("+J+"): 'start' option is incorrect.");e.handles=t.length,e.start=t}function F(e,t){if(e.snap=t,"boolean"!=typeof t)throw new Error("noUiSlider ("+J+"): 'snap' option must be a boolean.")}function P(e,t){if(e.animate=t,"boolean"!=typeof t)throw new Error("noUiSlider ("+J+"): 'animate' option must be a boolean.")}function q(e,t){if(e.animationDuration=t,"number"!=typeof t)throw new Error("noUiSlider ("+J+"): 'animationDuration' option must be a number.")}function O(e,t){var n,r=[!1];if("lower"===t?t=[!0,!1]:"upper"===t&&(t=[!1,!0]),!0===t||!1===t){for(n=1;n<e.handles;n++)r.push(t);r.push(!1)}else{if(!Array.isArray(t)||!t.length||t.length!==e.handles+1)throw new Error("noUiSlider ("+J+"): 'connect' option doesn't match handle count.");r=t}e.connect=r}function H(e,t){switch(t){case"horizontal":e.ort=0;break;case"vertical":e.ort=1;break;default:throw new Error("noUiSlider ("+J+"): 'orientation' option is invalid.")}}function $(e,t){if(!a(t))throw new Error("noUiSlider ("+J+"): 'margin' option must be numeric.");if(0!==t&&(e.margin=e.spectrum.getMargin(t),!e.margin))throw new Error("noUiSlider ("+J+"): 'margin' option is only supported on linear sliders.")}function M(e,t){if(!a(t))throw new Error("noUiSlider ("+J+"): 'limit' option must be numeric.");if(e.limit=e.spectrum.getMargin(t),!e.limit||e.handles<2)throw new Error("noUiSlider ("+J+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function R(e,t){if(!a(t))throw new Error("noUiSlider ("+J+"): 'padding' option must be numeric.");if(0!==t){if(e.padding=e.spectrum.getMargin(t),!e.padding)throw new Error("noUiSlider ("+J+"): 'padding' option is only supported on linear sliders.");if(e.padding<0)throw new Error("noUiSlider ("+J+"): 'padding' option must be a positive number.");if(e.padding>=50)throw new Error("noUiSlider ("+J+"): 'padding' option must be less than half the range.")}}function I(e,t){switch(t){case"ltr":e.dir=0;break;case"rtl":e.dir=1;break;default:throw new Error("noUiSlider ("+J+"): 'direction' option was not recognized.")}}function U(e,t){if("string"!=typeof t)throw new Error("noUiSlider ("+J+"): 'behaviour' must be a string containing options.");var n=t.indexOf("tap")>=0,r=t.indexOf("drag")>=0,i=t.indexOf("fixed")>=0,o=t.indexOf("snap")>=0,a=t.indexOf("hover")>=0;if(i){if(2!==e.handles)throw new Error("noUiSlider ("+J+"): 'fixed' behaviour must be used with 2 handles");$(e,e.start[1]-e.start[0])}e.events={tap:n||o,drag:r,fixed:i,snap:o,hover:a}}function W(e,t){if(!1!==t)if(!0===t){e.tooltips=[];for(var n=0;n<e.handles;n++)e.tooltips.push(!0)}else{if(e.tooltips=l(t),e.tooltips.length!==e.handles)throw new Error("noUiSlider ("+J+"): must pass a formatter for all handles.");e.tooltips.forEach(function(e){if("boolean"!=typeof e&&("object"!==(void 0===e?"undefined":_typeof(e))||"function"!=typeof e.to))throw new Error("noUiSlider ("+J+"): 'tooltips' must be passed a formatter or 'false'.")})}}function B(e,t){e.ariaFormat=t,N(t)}function V(e,t){e.format=t,N(t)}function z(e,t){if(void 0!==t&&"string"!=typeof t&&!1!==t)throw new Error("noUiSlider ("+J+"): 'cssPrefix' must be a string or `false`.");e.cssPrefix=t}function X(e,t){if(void 0!==t&&"object"!==(void 0===t?"undefined":_typeof(t)))throw new Error("noUiSlider ("+J+"): 'cssClasses' must be an object.");if("string"==typeof e.cssPrefix){e.cssClasses={};for(var n in t)t.hasOwnProperty(n)&&(e.cssClasses[n]=e.cssPrefix+t[n])}else e.cssClasses=t}function Q(e,t){if(!0!==t&&!1!==t)throw new Error("noUiSlider ("+J+"): 'useRequestAnimationFrame' option should be true (default) or false.");e.useRequestAnimationFrame=t}function Y(e){var t={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:K,format:K},n={step:{r:!1,t:j},start:{r:!0,t:L},connect:{r:!0,t:O},direction:{r:!0,t:I},snap:{r:!1,t:F},animate:{r:!1,t:P},animationDuration:{r:!1,t:q},range:{r:!0,t:A},orientation:{r:!1,t:H},margin:{r:!1,t:$},limit:{r:!1,t:M},padding:{r:!1,t:R},behaviour:{r:!0,t:U},ariaFormat:{r:!1,t:B},format:{r:!1,t:V},tooltips:{r:!1,t:W},cssPrefix:{r:!1,t:z},cssClasses:{r:!1,t:X},useRequestAnimationFrame:{r:!1,t:Q}},r={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},useRequestAnimationFrame:!0};e.format&&!e.ariaFormat&&(e.ariaFormat=e.format),Object.keys(n).forEach(function(i){if(void 0===e[i]&&void 0===r[i]){if(n[i].r)throw new Error("noUiSlider ("+J+"): '"+i+"' is required.");return!0}n[i].t(t,void 0===e[i]?r[i]:e[i])}),t.pips=e.pips;var i=[["left","top"],["right","bottom"]];return t.style=i[t.dir][t.ort],t.styleOposite=i[t.dir?0:1][t.ort],t}function G(e,i,a){function c(e,t){var n=fe.createElement("div");return t&&d(n,t),e.appendChild(n),n}function y(e,t){var n=c(e,i.cssClasses.origin),r=c(n,i.cssClasses.handle);return r.setAttribute("data-handle",t),r.setAttribute("tabindex","0"),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===t?d(r,i.cssClasses.handleLower):t===i.handles-1&&d(r,i.cssClasses.handleUpper),n}function b(e,t){return!!t&&c(e,i.cssClasses.connect)}function x(e,t){return!!i.tooltips[t]&&c(e.firstChild,i.cssClasses.tooltip)}function w(e,t,n){if("range"===e||"steps"===e)return ue.xVal;if("count"===e){if(!t)throw new Error("noUiSlider ("+J+"): 'values' required for mode 'count'.");var r,i=100/(t-1),o=0;for(t=[];(r=o++*i)<=100;)t.push(r);e="positions"}return"positions"===e?t.map(function(e){return ue.fromStepping(n?ue.getStep(e):e)}):"values"===e?n?t.map(function(e){return ue.fromStepping(ue.getStep(ue.toStepping(e)))}):t:void 0}function C(e,t,n){function i(e,t){return(e+t).toFixed(7)/1}var o={},a=ue.xVal[0],s=ue.xVal[ue.xVal.length-1],u=!1,l=!1,c=0;return(n=r(n.slice().sort(function(e,t){return e-t})))[0]!==a&&(n.unshift(a),u=!0),n[n.length-1]!==s&&(n.push(s),l=!0),n.forEach(function(r,a){var s,d,f,p,h,v,m,g,y,b=r,x=n[a+1];if("steps"===t&&(s=ue.xNumSteps[a]),s||(s=x-b),!1!==b&&void 0!==x)for(s=Math.max(s,1e-7),d=b;d<=x;d=i(d,s)){for(m=(h=(p=ue.toStepping(d))-c)/e,y=h/(g=Math.round(m)),f=1;f<=g;f+=1)o[(c+f*y).toFixed(5)]=["x",0];v=n.indexOf(d)>-1?1:"steps"===t?2:0,!a&&u&&(v=0),d===x&&l||(o[p.toFixed(5)]=[d,v]),c=p}}),o}function S(e,t,n){function r(e,t){var n=t===i.cssClasses.value,r=n?l:f,o=n?s:u;return t+" "+r[i.ort]+" "+o[e]}function o(e,o){o[1]=o[1]&&t?t(o[0],o[1]):o[1];var s=c(a,!1);s.className=r(o[1],i.cssClasses.marker),s.style[i.style]=e+"%",o[1]&&((s=c(a,!1)).className=r(o[1],i.cssClasses.value),s.style[i.style]=e+"%",s.innerText=n.to(o[0]))}var a=fe.createElement("div"),s=[i.cssClasses.valueNormal,i.cssClasses.valueLarge,i.cssClasses.valueSub],u=[i.cssClasses.markerNormal,i.cssClasses.markerLarge,i.cssClasses.markerSub],l=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],f=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];return d(a,i.cssClasses.pips),d(a,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(e).forEach(function(t){o(t,e[t])}),a}function k(){te&&(t(te),te=null)}function T(e){k();var t=e.mode,n=e.density||1,r=e.filter||!1,i=C(n,t,w(t,e.values||!1,e.stepped||!1)),o=e.format||{to:Math.round};return te=ie.appendChild(S(i,r,o))}function _(){var e=G.getBoundingClientRect(),t="offset"+["Width","Height"][i.ort];return 0===i.ort?e.width||G[t]:e.height||G[t]}function E(e,t,n,r){var o=function(t){return!ie.hasAttribute("disabled")&&(!p(ie,i.cssClasses.tap)&&(!!(t=D(t,r.pageOffset))&&(!(e===ne.start&&void 0!==t.buttons&&t.buttons>1)&&((!r.hover||!t.buttons)&&(re||t.preventDefault(),t.calcPoint=t.points[i.ort],void n(t,r))))))},a=[];return e.split(" ").forEach(function(e){t.addEventListener(e,o,!!re&&{passive:!0}),a.push([e,o])}),a}function D(e,t){var n,r,i=0===e.type.indexOf("touch"),o=0===e.type.indexOf("mouse"),a=0===e.type.indexOf("pointer");if(0===e.type.indexOf("MSPointer")&&(a=!0),i){if(e.touches.length>1)return!1;n=e.changedTouches[0].pageX,r=e.changedTouches[0].pageY}return t=t||h(fe),(o||a)&&(n=e.clientX+t.x,r=e.clientY+t.y),e.pageOffset=t,e.points=[n,r],e.cursor=o||a,e}function N(e){var t=100*(e-o(G,i.ort))/_();return i.dir?100-t:t}function j(e){var t=100,n=!1;return K.forEach(function(r,i){if(!r.hasAttribute("disabled")){var o=Math.abs(oe[i]-e);o<t&&(n=i,t=o)}}),n}function A(e,t,n,r){var i=n.slice(),o=[!e,e],a=[e,!e];r=r.slice(),e&&r.reverse(),r.length>1?r.forEach(function(e,n){var r=M(i,e,i[e]+t,o[n],a[n],!1);!1===r?t=0:(t=r-i[e],i[e]=r)}):o=a=[!0];var s=!1;r.forEach(function(e,r){s=W(e,n[e]+t,o[r],a[r])||s}),s&&r.forEach(function(e){L("update",e),L("slide",e)})}function L(e,t,n){Object.keys(ce).forEach(function(r){var o=r.split(".")[0];e===o&&ce[r].forEach(function(e){e.call(ee,le.map(i.format.to),t,le.slice(),n||!1,oe.slice())})})}function F(e,t){"mouseout"===e.type&&"HTML"===e.target.nodeName&&null===e.relatedTarget&&q(e,t)}function P(e,t){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===e.buttons&&0!==t.buttonsProperty)return q(e,t);var n=(i.dir?-1:1)*(e.calcPoint-t.startCalcPoint);A(n>0,100*n/t.baseSize,t.locations,t.handleNumbers)}function q(e,t){se&&(f(se,i.cssClasses.active),se=!1),e.cursor&&(he.style.cursor="",he.removeEventListener("selectstart",n)),de.forEach(function(e){pe.removeEventListener(e[0],e[1])}),f(ie,i.cssClasses.drag),U(),t.handleNumbers.forEach(function(e){L("change",e),L("set",e),L("end",e)})}function O(e,t){if(1===t.handleNumbers.length){var r=K[t.handleNumbers[0]];if(r.hasAttribute("disabled"))return!1;d(se=r.children[0],i.cssClasses.active)}e.stopPropagation();var o=E(ne.move,pe,P,{startCalcPoint:e.calcPoint,baseSize:_(),pageOffset:e.pageOffset,handleNumbers:t.handleNumbers,buttonsProperty:e.buttons,locations:oe.slice()}),a=E(ne.end,pe,q,{handleNumbers:t.handleNumbers}),s=E("mouseout",pe,F,{handleNumbers:t.handleNumbers});de=o.concat(a,s),e.cursor&&(he.style.cursor=getComputedStyle(e.target).cursor,K.length>1&&d(ie,i.cssClasses.drag),he.addEventListener("selectstart",n,!1)),t.handleNumbers.forEach(function(e){L("start",e)})}function H(e){e.stopPropagation();var t=N(e.calcPoint),n=j(t);if(!1===n)return!1;i.events.snap||s(ie,i.cssClasses.tap,i.animationDuration),W(n,t,!0,!0),U(),L("slide",n,!0),L("update",n,!0),L("change",n,!0),L("set",n,!0),i.events.snap&&O(e,{handleNumbers:[n]})}function $(e){var t=N(e.calcPoint),n=ue.getStep(t),r=ue.fromStepping(n);Object.keys(ce).forEach(function(e){"hover"===e.split(".")[0]&&ce[e].forEach(function(e){e.call(ee,r)})})}function M(e,t,n,r,o,a){return K.length>1&&(r&&t>0&&(n=Math.max(n,e[t-1]+i.margin)),o&&t<K.length-1&&(n=Math.min(n,e[t+1]-i.margin))),K.length>1&&i.limit&&(r&&t>0&&(n=Math.min(n,e[t-1]+i.limit)),o&&t<K.length-1&&(n=Math.max(n,e[t+1]-i.limit))),i.padding&&(0===t&&(n=Math.max(n,i.padding)),t===K.length-1&&(n=Math.min(n,100-i.padding))),n=ue.getStep(n),!((n=u(n))===e[t]&&!a)&&n}function R(e){return e+"%"}function I(e,t){oe[e]=t,le[e]=ue.fromStepping(t);var n=function(){K[e].style[i.style]=R(t),B(e),B(e+1)};window.requestAnimationFrame&&i.useRequestAnimationFrame?window.requestAnimationFrame(n):n()}function U(){ae.forEach(function(e){var t=oe[e]>50?-1:1,n=3+(K.length+t*e);K[e].childNodes[0].style.zIndex=n})}function W(e,t,n,r){return!1!==(t=M(oe,e,t,n,r,!1))&&(I(e,t),!0)}function B(e){if(Z[e]){var t=0,n=100;0!==e&&(t=oe[e-1]),e!==Z.length-1&&(n=oe[e]),Z[e].style[i.style]=R(t),Z[e].style[i.styleOposite]=R(100-n)}}function V(e,t){null!==e&&!1!==e&&("number"==typeof e&&(e=String(e)),!1===(e=i.format.from(e))||isNaN(e)||W(t,ue.toStepping(e),!1,!1))}function z(e,t){var n=l(e),r=void 0===oe[0];t=void 0===t||!!t,n.forEach(V),i.animate&&!r&&s(ie,i.cssClasses.tap,i.animationDuration),ae.forEach(function(e){W(e,oe[e],!0,!1)}),U(),ae.forEach(function(e){L("update",e),null!==n[e]&&t&&L("set",e)})}function X(){var e=le.map(i.format.to);return 1===e.length?e[0]:e}function Q(e,t){ce[e]=ce[e]||[],ce[e].push(t),"update"===e.split(".")[0]&&K.forEach(function(e,t){L("update",t)})}var G,K,Z,ee,te,ne=v(),re=g()&&m(),ie=e,oe=[],ae=[],se=!1,ue=i.spectrum,le=[],ce={},de=null,fe=e.ownerDocument,pe=fe.documentElement,he=fe.body;if(ie.noUiSlider)throw new Error("noUiSlider ("+J+"): Slider was already initialized.");return function(e){d(e,i.cssClasses.target),0===i.dir?d(e,i.cssClasses.ltr):d(e,i.cssClasses.rtl),0===i.ort?d(e,i.cssClasses.horizontal):d(e,i.cssClasses.vertical),G=c(e,i.cssClasses.base)}(ie),function(e,t){K=[],(Z=[]).push(b(t,e[0]));for(var n=0;n<i.handles;n++)K.push(y(t,n)),ae[n]=n,Z.push(b(t,e[n+1]))}(i.connect,G),ee={destroy:function(){for(var e in i.cssClasses)i.cssClasses.hasOwnProperty(e)&&f(ie,i.cssClasses[e]);for(;ie.firstChild;)ie.removeChild(ie.firstChild);delete ie.noUiSlider},steps:function(){return oe.map(function(e,t){var n=ue.getNearbySteps(e),r=le[t],i=n.thisStep.step,o=null;!1!==i&&r+i>n.stepAfter.startValue&&(i=n.stepAfter.startValue-r),o=r>n.thisStep.startValue?n.thisStep.step:!1!==n.stepBefore.step&&r-n.stepBefore.highestStep,100===e?i=null:0===e&&(o=null);var a=ue.countStepDecimals();return null!==i&&!1!==i&&(i=Number(i.toFixed(a))),null!==o&&!1!==o&&(o=Number(o.toFixed(a))),[o,i]})},on:Q,off:function(e){var t=e&&e.split(".")[0],n=t&&e.substring(t.length);Object.keys(ce).forEach(function(e){var r=e.split(".")[0],i=e.substring(r.length);t&&t!==r||n&&n!==i||delete ce[e]})},get:X,set:z,reset:function(e){z(i.start,e)},__moveHandles:function(e,t,n){A(e,t,oe,n)},options:a,updateOptions:function(e,t){var n=X(),r=["margin","limit","padding","range","animate","snap","step","format"];r.forEach(function(t){void 0!==e[t]&&(a[t]=e[t])});var o=Y(a);r.forEach(function(t){void 0!==e[t]&&(i[t]=o[t])}),ue=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips&&T(i.pips),oe=[],z(e.start||n,t)},target:ie,removePips:k,pips:T},function(e){e.fixed||K.forEach(function(e,t){E(ne.start,e.children[0],O,{handleNumbers:[t]})}),e.tap&&E(ne.start,G,H,{}),e.hover&&E(ne.move,G,$,{hover:!0}),e.drag&&Z.forEach(function(t,n){if(!1!==t&&0!==n&&n!==Z.length-1){var r=K[n-1],o=K[n],a=[t];d(t,i.cssClasses.draggable),e.fixed&&(a.push(r.children[0]),a.push(o.children[0])),a.forEach(function(e){E(ne.start,e,O,{handles:[r,o],handleNumbers:[n-1,n]})})}})}(i.events),z(i.start),i.pips&&T(i.pips),i.tooltips&&function(){var e=K.map(x);Q("update",function(t,n,r){if(e[n]){var o=t[n];!0!==i.tooltips[n]&&(o=i.tooltips[n].to(r[n])),e[n].innerHTML=o}})}(),Q("update",function(e,t,n,r,o){ae.forEach(function(e){var t=K[e],r=M(oe,e,0,!0,!0,!0),a=M(oe,e,100,!0,!0,!0),s=o[e],u=i.ariaFormat.to(n[e]);t.children[0].setAttribute("aria-valuemin",r.toFixed(1)),t.children[0].setAttribute("aria-valuemax",a.toFixed(1)),t.children[0].setAttribute("aria-valuenow",s.toFixed(1)),t.children[0].setAttribute("aria-valuetext",u)})}),ee}var J="10.0.0";D.prototype.getMargin=function(e){var t=this.xNumSteps[0];if(t&&e/t%1!=0)throw new Error("noUiSlider ("+J+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&b(this.xVal,e)},D.prototype.toStepping=function(e){return e=S(this.xVal,this.xPct,e)},D.prototype.fromStepping=function(e){return k(this.xVal,this.xPct,e)},D.prototype.getStep=function(e){return e=T(this.xPct,this.xSteps,this.snap,e)},D.prototype.getNearbySteps=function(e){var t=C(e,this.xPct);return{stepBefore:{startValue:this.xVal[t-2],step:this.xNumSteps[t-2],highestStep:this.xHighestCompleteStep[t-2]},thisStep:{startValue:this.xVal[t-1],step:this.xNumSteps[t-1],highestStep:this.xHighestCompleteStep[t-1]},stepAfter:{startValue:this.xVal[t-0],step:this.xNumSteps[t-0],highestStep:this.xHighestCompleteStep[t-0]}}},D.prototype.countStepDecimals=function(){var e=this.xNumSteps.map(c);return Math.max.apply(null,e)},D.prototype.convert=function(e){return this.getStep(this.toStepping(e))};var K={to:function(e){return void 0!==e&&e.toFixed(2)},from:Number};return{version:J,create:function(e,t){if(!e||!e.nodeName)throw new Error("noUiSlider ("+J+"): create requires a single element, got: "+e);var n=G(e,Y(t,e),t);return e.noUiSlider=n,n}}});var number={format:function(e){for(var t=(e=(e=String(e)).replace(/[^0-9.]/g,"")).split("").reverse(),n="",r=0,i=0;i<t.length;i++)r++,n+=t[i],3==r&&i+1!=t.length&&(n+=" ",r=0);return n.split("").reverse().join("")}};jQuery(document).ready(function(e){e(".number-format").each(function(t,n){e(this).text(number.format(e(this).text()))})});var FakeData={random:function(e,t){var n=e+Math.random()*(t+1-e);return n=Math.floor(n)},index:function(){for(var e={name:"Формула здоровья",weight:"50%",plan:1e3,fact:1500,progress:"50%",bonus:"7 000 ₽",prediction:{value:130,max:200},chart:{calc:{value:14e4,progress:50},base:{value:21e4,progress:60},plus:{value:237e3,progress:100}}},t=[],n=0;n<20;n++)t.push($.extend(!0,{},e)),e.chart.plus.progress=e.chart.plus.progress-1.5,e.chart.base.progress=e.chart.base.progress-1;return t},dictionary:function(){for(var e=DictionaryDescription[Dictionary.dictionary].columns,t=[],n={id:"123fa-52dfa-ads3da-2sad2",type:"select",values:["Администратор","Менеджер","Продавец"]},r={id:"1232131gdfgdfg",type:"field"},i=[],o=[],a=0;a<e.length;a++)"field"==e[a].type?(!0===e[a].number?i.push("10000"):i.push("Текстовое значение"),t.push(r)):(i.push(n.values[FakeData.random(0,2)]),t.push(n));for(a=0;a<13;a++)o.push(i);return{columns:t,rows:o}}},Chart={clear:function(){return $(".chart-body-row").remove(),this},progress:function(){$(".chart-bonus__progress").each(function(e,t){$(this).width($(this).attr("progress"))})},addRow:function(e){var t="";e.chart.calc.progress>e.chart.base.progress&&(t="chart-bonus__plus--active"),$(".chart-body").append('<div class="chart-body-row"><div class="chart-body-column">'+e.name+'</div><div class="chart-body-column"><div class="chart-bonus"><div class="chart-bonus__plus '+t+' chart-bonus__progress" progress="'+e.chart.plus.progress+'%" value="'+number.format(e.chart.plus.value)+' ₽"><div class="chart-bonus__base chart-bonus__progress" progress="'+e.chart.base.progress+'%" value="'+number.format(e.chart.base.value)+' ₽"></div><div class="chart-bonus__calc chart-bonus__progress" progress="'+e.chart.calc.progress+'%" value="'+number.format(e.chart.calc.value)+' ₽"></div></div></div></div></div>')},lines:function(e){$(".chart-body-lines").html("");for(var t=Math.floor(parseInt(e)/1e4),n=0,r=1e4/e*100,i=0;i<t;i++)n+=r,$(".chart-body-lines").append($("<div></div>").css("left",n+"%"))},render:function(e){this.clear();for(var t=0;t<e.length;t++)this.addRow(e[t]);this.lines(e[0].chart.plus.value),this.progress()}},Curve={y:0,x:0,bonus_plus:0,bonus_base:[0,0],point_start:0,point_finish:0,target:0,points:[],slider:null,init:function(e){return this.bonus_plus=e.bonus_plus,this.bonus_base=e.bonus_base,this.target=e.target,this.points=e.points,this.point_start=e.point_start,this.point_finish=e.point_finish,$(".curve-points__field--start").val(e.point_start+"%"),$(".curve-points__field--finish").val(e.point_finish+"%"),$(".curve-shape__field--1").val(e.shape_1),$(".curve-shape__field--2").val(e.shape_2),$(".curve-bonus__value--base").val(number.format(e.bonus_base[1])),$(".curve-bonus__value--plus").text(number.format(e.bonus_plus)),this},draw:function(e){return this.renderSlider().renderLines().renderBase().renderTarget().renderText().renderGraph(),this},renderText:function(){var e=this.points[this.points.length-1][0]/200*85+"%",t=this.points[this.points.length-1][1]/(this.bonus_plus+1e4)*102+"%";return $(".curve-graph-text").css({bottom:t,left:e}),this},setSlider:function(e){return this.slider.noUiSlider.set(parseInt(e)),this.setTarget(parseInt(e))},renderSlider:function(){return this.slider=$(".curve-slider__body").find("div")[0],noUiSlider.create(this.slider,{start:100,connect:[!0,!1],range:{min:this.point_start,max:this.point_finish}}),this.slider.noUiSlider.on("slide",function(){var e=parseInt(this.slider.noUiSlider.get());$(".curve-slider__value").val(e+"%"),this.setTarget(e)}.bind(this)),$(".curve-slider__value").attr("min",this.point_start).attr("max",this.point_finish),this},renderLines:function(){$(".curve-graph-lines-x div").remove(),$(".curve-graph-lines-y div").remove(),this.y=Math.ceil(this.bonus_plus/1e4)+2,this.x=20;for(e=0;e<this.x;e++)$(".curve-graph-lines-x").append("<div><span>"+10*e+"</span></div>");for(var e=0;e<this.y;e++)$(".curve-graph-lines-y").append("<div><span>"+10*e+"</span></div>");return this},renderBase:function(){var e=this.bonus_base[0]/200*100+"%",t=this.bonus_base[1]/(this.bonus_plus+1e4)*100+"%";return $(".curve-graph-base").width(e),$(".curve-graph-base").height(t),this},renderTarget:function(){var e=this.points[this.target][0]/200*100+"%",t=this.points[this.target][1]/(this.bonus_plus+1e4)*100+"%";return $(".curve-graph-target").width(e),$(".curve-graph-target").height(t),$(".curve-graph-point").css({left:e,bottom:t}),this},setTarget:function(e){for(var t=9999,n=0,r=0;r<this.points.length;r++){var i=Math.abs(e-this.points[r][0]);i<t&&(t=i,n=r)}return this.target=n,this.renderTarget()},setBase:function(e){return this.bonus_base=[100,parseInt(e)],this.renderBase()},renderGraph:function(){var e=d3.svg.line().x(function(e){return e[0]*$("svg").width()/200}).y(function(e){return e[1]*$("svg").height()/(this.bonus_plus+1e4)}.bind(this)).interpolate("cardinal"),t=this.points;d3.select("path").data([t]).attr("d",e)},fakeData:function(){for(var e={bonus_plus:24e4,bonus_base:[100,140630],point_start:60,point_finish:150,shape_1:.77,shape_2:1.35,target:130,points:[]},t=[0,0],n=60;n<150;n+=.5625)t[0]=n,t[1]=11*n*n+240*n-55404,e.points.push(t.slice());return e},load:function(){var e=this.fakeData();this.init(e).draw()},getList:function(){$(".popup--curve").find(".popup-list__item").remove();for(var e=["curve 1","curve 2","curve 3"],t=0;t<e.length;t++)$(".popup--curve").find(".popup-list").append('<div class="popup-list__item">'+e[t]+"</div>")}},DictionaryDescription={dictionary_position:{columns:[{name:"Наименование Должности",type:"select"},{name:"Базовый Бонус",type:"field",number:!0},{name:"Признак Группы",type:"select",number:!0}]},dictionary_bonus_position:{columns:[{name:"Наименование Бонусной Должности",type:"select"},{name:"Тип расчета",type:"select"}]},dictionary_brand:{columns:[{name:"Наименование Бренда",type:"field"},{name:"Наименование Кривой",type:"select"}]},dictionary_bu:{columns:[{name:"Наименование БЮ",type:"select"},{name:"Наименование Кривой",type:"select"}]},dictionary_pharmacy:{columns:[{name:"Наименование аптечной сети",type:"field"},{name:"Наименование БЮ",type:"select"},{name:"Наименование Кривой",type:"select"}]},dictionary_other:{columns:[{name:"Наименование элементов зоны ответственности",type:"select"},{name:"Наименование Кривой",type:"select"}]},weight_brand:{columns:[{name:"Бонусная Должность",type:"select"},{name:"БЮ",type:"select"},{name:"Линия",type:"select"},{name:"Бренд",type:"field"},{name:"Вес (в %)",type:"field",number:!0}]},weight_bu:{columns:[{name:"Бонусная Должность",type:"select"},{name:"БЮ",type:"select"},{name:"Вес (в %)",type:"field",number:!0}]},weight_pharmacy:{columns:[{name:"Бонусная Должность",type:"select"},{name:"Аптечная сеть",type:"field"},{name:"Вес (в %)",type:"field",number:!0}]},weight_other:{columns:[{name:"Бонусная Должность",type:"select"},{name:"Элемент зоны ответственности",type:"select"},{name:"Вес (в %)",type:"field",number:!0}]}},Dictionary={table:null,dictionary:"",columns:[],init:function(e){return this.table=$(".table--dictionary"),this.dictionary=e,this.initRender(),this},initRender:function(){var e=DictionaryDescription[this.dictionary].columns;this.table.find("col").remove(),this.table.find("tr").remove(),this.table.find("td").remove(),this.table.find("colgroup").append('<col width="40"></col>'),this.table.find(".table-head tbody").append('<td class="table-head-checkbox"><span></span></td>');for(var t=0;t<e.length;t++)this.table.find("colgroup").append('<col width="100%/'+e.length+'"></col>'),this.table.find(".table-head tbody").append("<td><span>"+e[t].name+"</span></td>");return this},load:function(){var e=FakeData.dictionary();this.columns=e.columns;for(var t=0;t<e.rows.length;t++)this.addRow(e.rows[t]);this.addRowEmpty()},addSelect:function(e,t,n){var r=!1===e?"table-select table-select--empty":"table-select";return e=!1===e?t:e,'<td>\n                    <div class="'+r+'">\n                        <span>'+e+'</span>\n                        <i class="mdi mdi-chevron-down"></i>\n                        <ul class="table-select__list">\n                            '+n.map(function(e){return'<li class="table-select__item">'+e+"</li>"}).join("")+"\n                        </ul>\n                    </div>\n                </td>"},addField:function(e,t,n){var r="table-field";return void 0!==n&&(r=!0===n?"table-field table-field--number":"table-field",e=!0===n?number.format(e):e),'<td>\n                    <div class="'+r+'">\n                        <input type="text" value="'+e+'" placeholder="'+t+'"/>\n                    </div>\n                </td>'},addCheckbox:function(){return'<td>\n                    <div class="table-checkbox">\n                        <i class="mdi mdi-checkbox-marked"></i>\n                        <i class="mdi mdi-checkbox-blank-outline"></i>\n                    </div>\n                </td>'},addRow:function(e){var t=DictionaryDescription[this.dictionary].columns,n=$("<tr></tr>");n.append(this.addCheckbox());for(var r=0;r<this.columns.length;r++)"field"==this.columns[r].type?n.append(this.addField(e[r],t[r].name,t[r].number)):n.append(this.addSelect(e[r],t[r].name,this.columns[r].values));this.table.find(".table-body tbody").append(n)},addRowEmpty:function(){var e=DictionaryDescription[this.dictionary].columns,t=$("<tr></tr>").addClass("table-row--empty");t.append(this.addCheckbox());for(var n=0;n<e.length;n++)"field"==e[n].type?t.append(this.addField("",e[n].name,e[n].number)):t.append(this.addSelect(!1,e[n].name,this.columns[n].values));this.table.find(".table-body tbody").append(t)}},Popup={show:function(e){$(".popup").removeClass("popup--visible"),$(".popup--"+e).addClass("popup--visible")},hide:function(){$(".popup").removeClass("popup--visible")},get:function(e){return $(".popup--"+e)}};jQuery(document).ready(function(e){e(".popup__overlay").click(function(e){Popup.hide()})});var Profile={getFakeData:function(){return{name:"Петров Константин Константинович",position:"Администратор Адм инист ратор Админ истра тор",bonus:"31 234 ₽",bonus_calc:"12 313 ₽",ratio:"46 %",date:"Вторник, 23 мая 2017"}},getCurrentUser:function(){this.render(this.getFakeData())},getUsersList:function(){$(".profile-select-item").remove();for(var e={name:"Шахова Марина Павловна",position:"Менеджер asd ad adadsad sad adsadas "},t=[],n=0;n<10;n++)t.push(e);this.renderUsersList(t)},renderUsersList:function(e){for(var t=0;t<e.length;t++)$(".profile-select-list").append('<div class="profile-select-item"><div class="profile-select-item__image"><i class="mdi mdi-account"></i></div><div class="profile-select-item__name">'+e[t].name+'</div><div class="profile-select-item__position">'+e[t].position+"</div></div>")},render:function(e){$(".profile__name span, .profile-select-header__name").text(e.name),$(".profile__position, .profile-select-header__position").text(e.position),$(".profile__amount").text(e.bonus),$(".info__text--bonus").text(e.bonus_calc),$(".info__text--ratio").text(e.ratio),$(".today__text").text(e.date)}},Table={init:function(e){return this.table=e,this},clear:function(){return $(this.table+" .table-body tr").remove(),this},renderSliders:function(){return $(this.table+" .table-slider").each(function(e,t){var n=$(this).append("<div><div>").find("div")[0];noUiSlider.create(n,{start:parseInt($(this).attr("data-value")),connect:[!0,!1],range:{min:0,max:parseInt($(this).attr("data-max"))}})}),this},addCell:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=$("<td></td>").text(t);"bonus"===n&&r.addClass("table-bonus"),"slider"===n&&r.text("").addClass("table-slider").attr("data-max",t.max).attr("data-value",t.value),"field"==n&&r.text("").append($("<div></div>").addClass("table-field").addClass("table-field--ruble").addClass("table-field--number").append($('<input type="text"/>').val(number.format(t)+" ₽"))),e.append(r)},addRow:function(e){var t=$("<tr></tr");this.addCell(t,e.name),this.addCell(t,e.weight),this.addCell(t,e.plan,"field"),this.addCell(t,e.fact,"field"),this.addCell(t,e.progress),this.addCell(t,e.bonus,"bonus"),this.addCell(t,e.prediction,"slider"),$(this.table+" .table-body tbody").append(t)},render:function(e){this.clear();for(var t=0;t<e.length;t++)this.addRow(e[t]);this.renderSliders()}};jQuery(document).ready(function(e){e(".admin-menu__item").click(function(t){e(".admin-menu__item").removeClass("admin-menu__item--active"),e(".header-select").removeClass("header-select--visible"),e(this).addClass("admin-menu__item--active"),e(".header-select--"+e(this).attr("type")).addClass("header-select--visible")}),e(".admin-menu__item").click(function(t){var n=e(this).attr("content");e(".content").removeClass("content--active"),e(".content--"+n).addClass("content--active"),"curve"==n?(e(".header-button--edit").show(),Curve.load()):e(".header-button--edit").hide()}),e(".admin-menu__item").click(function(t){var n=e(".header-select--"+e(this).attr("type")).attr("type");e(".popup--"+n).find(".popup-list__item").first().click()})}),jQuery(document).ready(function(e){e(".curve-points__field").focus(function(e){this.value=this.value.replace(/[^0-9\.]/g,"")}),e(".curve-points__field").blur(function(e){""==this.value.trim()&&(this.value="0"),this.value=this.value+"%"}),e(".curve-points__field").keyup(function(t){37!=t.keyCode&&39!=t.keyCode&&(t.preventDefault(),this.value!=this.value.replace(/[^0-9]/g,"")&&(this.value=this.value.replace(/[^0-9]/g,"")),""!=this.value&&this.value.length!=String(parseInt(this.value)).length&&(this.value=parseInt(this.value)),""!=this.value&&parseInt(this.value)>parseInt(e(this).attr("max"))&&(this.value=parseInt(e(this).attr("max"))),13==t.keyCode&&e(this).blur())}),e(".curve-shape__field").keyup(function(t){if(37!=t.keyCode&&39!=t.keyCode){t.preventDefault(),this.value!=this.value.replace(/[^0-9.]/g,"")&&(this.value=this.value.replace(/[^0-9.]/g,""));var n=e(this),r=parseFloat(n.val()),i=parseFloat(n.attr("max")),o=parseFloat(n.attr("min"));r<o?(r=o,r=Math.round(100*r)/100,r=1==String(r).length?r+".00":r,r=3==String(r).length?r+"0":r,n.val(r)):r>i&&(r=i,r=Math.round(100*r)/100,r=1==String(r).length?r+".00":r,r=3==String(r).length?r+"0":r,n.val(r)),13==t.keyCode&&e(this).blur()}}),e(".curve-shape__field").blur(function(t){t.preventDefault(),""==this.value.trim()&&(this.value="0");var n=e(this),r=parseFloat(n.val()),i=parseFloat(n.attr("max")),o=parseFloat(n.attr("min"));r<o&&(r=o),r>i&&(r=i),r=Math.round(100*r)/100,r=1==String(r).length?r+".00":r,r=3==String(r).length?r+"0":r,n.val(r)}),e(".curve-shape__btn--minus").click(function(t){var n=e(this).parent().find("input"),r=parseFloat(n.val()),i=(parseFloat(n.attr("max")),parseFloat(n.attr("min")));(r-=.01)<i&&(r=i),r=Math.round(100*r)/100,r=1==String(r).length?r+".00":r,r=3==String(r).length?r+"0":r,n.val(r)}),e(".curve-shape__btn--plus").click(function(t){var n=e(this).parent().find("input"),r=parseFloat(n.val()),i=parseFloat(n.attr("max"));parseFloat(n.attr("min"));(r+=.01)>i&&(r=i),r=Math.round(100*r)/100,r=1==String(r).length?r+".00":r,r=3==String(r).length?r+"0":r,n.val(r)}),e(".curve-bonus__value--base").keyup(function(t){37!=t.keyCode&&39!=t.keyCode&&(t.preventDefault(),this.value!=this.value.replace(/[^0-9]/g,"")&&(this.value=this.value.replace(/[^0-9]/g,"")),""!=this.value&&this.value.length!=String(parseInt(this.value)).length&&(this.value=parseInt(this.value)),""!=this.value&&Curve.setBase(this.value),13==t.keyCode&&e(this).blur())}),e("body").on("blur",".curve-bonus__value--base",function(e){e.preventDefault(),""==this.value.trim()&&(this.value="0"),this.value=number.format(this.value)}),e("body").on("focus",".curve-bonus__value--base",function(e){e.preventDefault(),this.value=this.value.replace(/[^0-9]/g,"")}),e(".curve-slider__value").keyup(function(t){37!=t.keyCode&&39!=t.keyCode&&(t.preventDefault(),this.value!=this.value.replace(/[^0-9]/g,"")&&(this.value=this.value.replace(/[^0-9]/g,"")),""!=this.value&&this.value.length!=String(parseInt(this.value)).length&&(this.value=parseInt(this.value)),13==t.keyCode&&e(this).blur())}),e(".curve-slider__value").focus(function(e){this.value=this.value.replace(/[^0-9\.]/g,"")}),e(".curve-slider__value").blur(function(t){""!=this.value.trim()?(parseInt(this.value)>parseInt(e(this).attr("max"))&&(this.value=parseInt(e(this).attr("max"))),parseInt(this.value)<parseInt(e(this).attr("min"))&&(this.value=parseInt(e(this).attr("min")))):this.value=e(this).attr("min"),Curve.setSlider(this.value),this.value=this.value+"%"}),Curve.getList()}),jQuery(document).ready(function(e){e("body").on("click",".header-select",function(t){Popup.hide(),Popup.show(e(this).attr("type"))}),e("body").on("click",".popup-list__item",function(t){t.preventDefault(),t.stopPropagation(),e(".header-select--visible span, .header-dictionary__name").text(e(this).text()),e(".header").addClass("header--hide"),e(".header--light").removeClass("header--hide");var n=e(this).attr("dictionary");void 0!==n&&Dictionary.init(n).load(),Popup.hide()}),e(".admin-menu__item--active").click()}),jQuery(document).ready(function(e){e(".header-button").click(function(t){t.preventDefault(),t.stopPropagation(),e(".header-settings").addClass("header-settings--visible")}),e(window).click(function(t){e(".header-settings").removeClass("header-settings--visible")}),e(window).keyup(function(t){27==t.keyCode&&e(".header-settings").removeClass("header-settings--visible")}),e(".header-settings").click(function(e){e.preventDefault(),e.stopPropagation()}),e(".header-settings__item").click(function(t){t.preventDefault(),t.stopPropagation(),alert(e(this).text()),e(".header-settings").removeClass("header-settings--visible")})}),jQuery(document).ready(function(e){e(".header-tabs__item").click(function(t){e(".header-tabs__item").removeClass("header-tabs__item--active"),e(this).addClass("header-tabs__item--active"),e(".content").removeClass("content--active"),e(".content--"+e(this).attr("code")).addClass("content--active")})}),jQuery(document).ready(function(e){Profile.getCurrentUser(),Profile.getUsersList(),e(".profile__name").click(function(t){t.preventDefault(),t.stopPropagation(),e(".profile-select").addClass("profile-select--visible")}),e(window).click(function(t){e(".profile-select").removeClass("profile-select--visible")}),e(window).keyup(function(t){27==t.keyCode&&e(".profile-select").removeClass("profile-select--visible")}),e(".profile-select").click(function(e){e.preventDefault(),e.stopPropagation()}),e(".profile-select-item").click(function(t){t.preventDefault(),t.stopPropagation(),alert(e(this).find(".profile-select-item__name").text()),e(".profile-select").removeClass("profile-select--visible")})}),jQuery(document).ready(function(e){e("body").on("click",".table-checkbox",function(t){t.preventDefault(),e(this).hasClass("table-checkbox--active")?(e(this).removeClass("table-checkbox--active"),0==e(".table-checkbox--active").length&&(e(".header").addClass("header--hide"),e(".header--light").removeClass("header--hide"))):(e(this).addClass("table-checkbox--active"),e(".header").addClass("header--hide"),e(".header--edit").removeClass("header--hide"))}),e(".header-dictionary__button--cancel").click(function(t){e(".table-checkbox").removeClass("table-checkbox--active"),e(".header").addClass("header--hide"),e(".header--light").removeClass("header--hide")}),e(".header-dictionary__button--delete").click(function(t){e(".table-checkbox--active").parents("tr").remove(),e(".header").addClass("header--hide"),e(".header--light").removeClass("header--hide")})}),jQuery(document).ready(function(e){e("body").on("keyup",".table-field--number input",function(e){37!=e.keyCode&&39!=e.keyCode&&(e.preventDefault(),this.value!=this.value.replace(/[^0-9]/g,"")&&(this.value=this.value.replace(/[^0-9]/g,"")),""!=this.value&&this.value.length!=String(parseInt(this.value)).length&&(this.value=parseInt(this.value)))}),e("body").on("keyup",".table-field input",function(t){37!=t.keyCode&&39!=t.keyCode&&(t.preventDefault(),13==t.keyCode&&e(this).blur())}),e("body").on("blur",".table-field--number input",function(t){t.preventDefault(),""==this.value.trim()&&(this.value="0"),this.value=number.format(this.value),e(this).parent().hasClass("table-field--ruble")&&(this.value=this.value+" ₽")}),e("body").on("focus",".table-field--number input",function(e){e.preventDefault(),this.value=this.value.replace(/[^0-9]/g,"")})}),jQuery(document).ready(function(e){e("body").on("click",".table-row--empty .table-select__item",function(t){t.preventDefault(),e(this).parents(".table-row--empty").removeClass("table-row--empty"),Dictionary.addRowEmpty()}),e("body").on("keyup",".table-row--empty .table-field input",function(t){t.preventDefault(),13!=t.keyCode&&(e(this).parents(".table-row--empty").removeClass("table-row--empty"),Dictionary.addRowEmpty())})}),jQuery(document).ready(function(e){var t="table-select--visible";e("body").on("click",".table-select",function(n){e(this).hasClass(t)?e(".table-select").removeClass(t):(e(".table-select").removeClass(t),n.preventDefault(),n.stopPropagation(),e(this).addClass(t))}),e(window).click(function(n){e(".table-select").removeClass(t)}),e("body").on("click",".table-select__item",function(n){n.preventDefault(),n.stopPropagation(),e(this).parents(".table-select").find("span").text(e(this).text()),e(this).parents(".table-select").removeClass("table-select--empty"),e(".table-select").removeClass(t)})}),jQuery(document).ready(function(e){e(".header-button--edit").click(function(t){Popup.get("edit").find("input").val(e(".header-select--curve span").text()),Popup.show("edit")}),e(".popup__btn--cancel").click(function(e){Popup.hide()}),e(".popup__btn--ok").click(function(t){Popup.hide(),e(".header-select--curve span").text(Popup.get("edit").find("input").val())}),e(".header-save").click(function(e){Popup.show("save")})}),jQuery(document).ready(function(e){!function(){var e=FakeData.index();Table.init(".table--main").render(e),Chart.render(e)}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
